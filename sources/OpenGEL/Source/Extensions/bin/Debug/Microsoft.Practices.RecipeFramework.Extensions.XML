<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.RecipeFramework.Extensions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction">
            <summary>
            Generates class from CodeCompileUnit.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassGeneratorFromCompileUnitAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.CompileUnit">
            <summary>
            CodeCompileUnit to generate the class
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.Language">
            <summary>
            Language for the code provider
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.CodeProvider">
            <summary>
            Gets or sets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.Class">
            <summary>
            Class generated from the CodeCompileUnit using the provided Language
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.ClassGeneratorFromCompileUnitAction.ProviderFactory.CreateProvider(Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.Helpers.LanguageType)">
            <summary>
            Creates the provider.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.Helpers.LanguageType">
            <summary>
            Language Types Enum for code generation
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.Helpers.LanguageType.cs">
            <summary>
            CSharp Language
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.Helpers.LanguageType.vb">
            <summary>
            Visual Basic Net Language
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.GAX.EnableGuidancePackageAction">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.GAX.EnableGuidancePackageAction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.GAX.EnableGuidancePackageAction.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.GAX.EnableGuidancePackageAction.PackageName">
            <summary>
            Gets or sets the name of the package.
            </summary>
            <value>The name of the package.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.EvaluateExpressionAction">
            <summary>
            Action that evaluates an expression
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.EvaluateExpressionAction.Execute">
            <summary>
            Evaluates the expression
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.EvaluateExpressionAction.Undo">
            <summary>
            Just sets the return value to null again
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.EvaluateExpressionAction.Expression">
            <summary>
            The expression been evaluated
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.EvaluateExpressionAction.ReturnValue">
            <summary>
            The result of the evaluation
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction">
            <summary>
            Action that gets the template path for the guidance package
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction.GetBasePath">
            <summary>
            Gets the base path.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction.TemplateFile">
            <summary>
            Gets or sets the template file.
            </summary>
            <value>The template file.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.General.GetTemplateFilePathAction.TemplateFilePath">
            <summary>
            Gets or sets the template file path.
            </summary>
            <value>The template file path.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction">
            <summary>
            Create a directory under the solution path
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction.GetSolutionPath">
            <summary>
            Gets the solution path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction.Undo">
            <summary>
            Undo the action. Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction.DirectoryName">
            <summary>
            Directory name to create
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryAction.FullPath">
            <summary>
            Full path of the directory created
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction">
            <summary>
            Create a directory under a given project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.GetProjectPath">
            <summary>
            Gets the solution path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.Undo">
            <summary>
            Undo the action. Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.DirectoryName">
            <summary>
            Directory name to create
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.Project">
            <summary>
            Project where the folder will be created
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.ParentFolder">
            <summary>
            Parent folder if any
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.CreateDirectoryOnProjectAction.FullPath">
            <summary>
            Full path of the directory created
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction">
            <summary>
            Action that executes a process
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.ExecutablePath">
            <summary>
            Gets or sets the executable path.
            </summary>
            <value>The executable path.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.ExecutableFile">
            <summary>
            Gets or sets the executable file.
            </summary>
            <value>The executable file.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.ExecutableArguments">
            <summary>
            Gets or sets the executable arguments.
            </summary>
            <value>The executable arguments.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.CreateNoWindow">
            <summary>
            Gets or sets a value indicating whether [create no window].
            </summary>
            <value><c>true</c> if [create no window]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.WaitForExit">
            <summary>
            Gets or sets a value indicating whether [wait for exit].
            </summary>
            <value><c>true</c> if [wait for exit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ExecuteProcessAction.ProcessWindowStyle">
            <summary>
            Gets or sets the process window style.
            </summary>
            <value>The process window style.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction">
            <summary>
            Copy the files (separated by ;) from source dir to target dir
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction.Undo">
            <summary>
            Undo the action
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction.TargetDir">
            <summary>
            Target directory
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction.SourceDir">
            <summary>
            Source directory
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.FileCopyAction.FileNames">
            <summary>
            Filenames to copy separated by semi-colon
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadCurrentUserEntryAction">
            <summary>
            Action that reads a Current User registry entry
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction">
            <summary>
            Base Action that reads a registry entry 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.registryPath">
            <summary>
            The registry path.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.registryEntry">
            <summary>
            The registry entry
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction._value">
            <summary>
            The output value
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.RegistryPath">
            <summary>
            Gets or sets the registry path.
            </summary>
            <value>The registry path.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.RegistryEntry">
            <summary>
            Gets or sets the registry entry.
            </summary>
            <value>The registry entry.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadRegistryEntryAction.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadCurrentUserEntryAction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadCurrentUserEntryAction.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadLocalMachineEntryAction">
            <summary>
            Action that reads a Local Machine registry entry
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadLocalMachineEntryAction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.OS.ReadLocalMachineEntryAction.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction">
            <summary>
            Export a Visual Studio Solution Template including all projects inside solution
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.DestinationPath">
            <summary>
            Gets or sets the destination path.
            </summary>
            <value>The destination path.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.ProjectsBaseDirectory">
            <summary>
            Gets or sets the projects base directory.
            </summary>
            <value>The projects base directory.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.SolutionTemplateIconFile">
            <summary>
            Gets or sets the solution template icon file.
            </summary>
            <value>The solution template icon file.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.ExportSolutionTemplateAction.ProjectsTemplateIconFile">
            <summary>
            Gets or sets the projects template icon file.
            </summary>
            <value>The projects template icon file.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction">
            <summary>
            Unfolds a Visual Studio Template
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.Execute">
            <summary>
            Unfolds the template
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.Undo">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.Root">
            <summary>
            The root object where the template will be unfolded.
            This object could be a <see cref="T:EnvDTE.ProjectItem"/>, a <see cref="T:EnvDTE.Project"/> or null
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.Template">
            <summary>
            The .vstemplate file to unfold
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.ItemName">
            <summary>
            The name of the new item after unfold
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.DestinationFolder">
            <summary>
            The physical locatiuon of the a project template been unfolded
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.Path">
            <summary>
            The path whitin a <see cref="T:EnvDTE.Project"/> where the item template will be unfolded 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.Templates.UnfoldTemplateAction.NewItem">
            <summary>
            The new item just created, this object can be a <see cref="T:EnvDTE.Project"/> or a <see cref="T:EnvDTE.ProjectItem"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction">
            <summary>
            Add multiple assemblies reference to a project given a base path and the file names separated by semi-colon. GACs can also be added.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction.Undo">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction.FileNames">
            <summary>
            Assembly filenames separated by semi-colon
            </summary>
            <remarks>
            If the assemblies are in the GAC this property can have assembly fullname. Don't need to use AssembliesPath.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction.ReferringProject">
            <summary>
            The project where the reference/s is been added
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssembliesReferenceAction.AssembliesPath">
            <summary>
            Directory where the assemblies reside
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction">
            <summary>
            The action adds a file to the project item or solution item
            The other input properties of the action are 
            (a) SourceFileName - provides the name of the file 
            (b) SourceFilePath - provides the path name of the file
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.SourceFileName">
            <summary>
            Name of the source file
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.SourceFilePath">
            <summary>
            Name of the source file path
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.InputProjectItem">
            <summary>
            The InputProjectItem object where add the file
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.Open">
            <summary>
            A flag to indicate if the newly created item should be shown
            in a window.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromFileToProjectItemAction.ProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction">
            <summary>
            The action creates a project item from a string passed to the action
            in the Content input property. The other two input properties of the
            action are (a) targetFileName - provides the name of the item file 
            and (b) Project - identifies the project where the item is created. 
            The action is designed to follow the T3Action. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.Content">
            <summary>
            The string with the content of the item. In most cases it is a class
            generated using the T3 engine.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.TargetFileName">
            <summary>
            Name of the file where the item is to be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.Project">
            <summary>
            Project where the item it to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.Open">
            <summary>
            A flag to indicate if the newly created item should be shown
            in a window.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringAction.ProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction">
            <summary>
            The action creates a project item from a string passed to the action
            in the Content input property. The other two input properties of the
            action are (a) targetFileName - provides the name of the item file 
            and (b) ProjectItem - identifies the project item where the item is created. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.Content">
            <summary>
            The string with the content of the item. In most cases it is a class
            generated using the T4 engine.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.TargetFileName">
            <summary>
            Name of the file where the item is to be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.InputProjectItem">
            <summary>
            Project item where the item it to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.Open">
            <summary>
            A flag to indicate if the newly created item should be shown
            in a window.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemAction.ProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction">
            <summary>
            The action creates a project item from a string passed to the action
            in the Content input property. The other two input properties of the
            action are (a) targetFileName - provides the name of the item file 
            and (b) ProjectItem - identifies the project item where the item is created. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.Content">
            <summary>
            The string with the content of the item. In most cases it is a class
            generated using the T4 engine.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.TargetFileName">
            <summary>
            Name of the file where the item is to be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.Project">
            <summary>
            Project where the item it is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.ItemName">
            <summary>
            Item Name where the item it is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemFromStringToProjectItemByNameAction.ProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction">
            <summary>
            The action creates a folder on the parent prject item on a given project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.Execute">
            <summary>
            The method that creates a new item on the parent item
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.TargetFolderName">
            <summary>
            Name of the folder
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.Project">
            <summary>
            Project where the item it is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.ParentItem">
            <summary>
            Item Name where the item it is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddItemToProjectItemByNameAction.ProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectGlobalsEntryAction">
            <summary>
            Action that saves an entry into the project globals section
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction">
            <summary>
            Base class for Global persistance values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.OnExecute(System.Object)">
            <summary>
            Called when [execute].
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.OnUndo">
            <summary>
            Called when [undo].
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.BaseGlobalsEntryAction.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectGlobalsEntryAction.OnExecute(System.Object)">
            <summary>
            Called when [execute].
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectGlobalsEntryAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction">
            <summary>
            Adds a reference to a project pointing to another 
            project in the same solution. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.Execute">
            <summary>
            Adds the project reference to the <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.ReferencedProject"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.ReferringProject">
            <summary>
            The project receiving the new reference
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.ReferencedAssembly">
            <summary>
            The assembly reference been added
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectReferenceAction.ReferencedProject">
            <summary>
            The project reference been added
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction">
            <summary>
            The action adds a file to the project item or solution item passed 
            to the action in the Content input property. 
            The other input properties of the action are 
            (a) SourceFileName - provides the name of the file 
            (b) SourceFilePath - provides the path name of the file
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.Undo">
            <summary>
            Undoes the creation of the item, then deletes the item
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.AddItem(EnvDTE.ProjectItem,EnvDTE.ProjectItems)">
            <summary>
            Adds the item.
            </summary>
            <param name="projectItem">The project item.</param>
            <param name="projectItems">The project items.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.AddItem(EnvDTE.Project,EnvDTE.ProjectItems)">
            <summary>
            Adds the item.
            </summary>
            <param name="project">The project.</param>
            <param name="projectItems">The project items.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.SourceFilePath">
            <summary>
            Name of the source file path
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.TargetProject">
            <summary>
            TargetProject where the item is going to be inserted
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.Open">
            <summary>
            A flag to indicate if the newly created item should be shown
            in a window.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.ItemName">
            <summary>
            ItemName where the item is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.ProjectItem">
            <summary>
            ProjectItem where the item is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.OverwriteItemIfExists">
            <summary>
            Gets or sets a value indicating whether [overwrite item if exists].
            </summary>
            <value>
            	<c>true</c> if [overwrite item if exists]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemFromFileAction.OutputProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssemblyReferenceAction">
            <summary>
            Adds a reference to a project pointing to another 
            project in the same solution. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssemblyReferenceAction.Execute">
            <summary>
            Adds the reference to the project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssemblyReferenceAction.Undo">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssemblyReferenceAction.ReferringProject">
            <summary>
            The project where the reference is been added
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddAssemblyReferenceAction.AssemblyFilePath">
            <summary>
            The file name reference
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderAction">
            <summary>
            Adds a solution folder item.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderAction.Execute">
            <summary>
            Delete an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderAction.Undo">
            <summary>
            This method do nothing
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderAction.SolutionFolderName">
            <summary>
            Gets or sets the name of the solution folder.
            </summary>
            <value>The name of the solution folder.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction">
            <summary>
            Action that adds an item to a Solution Folder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.SourceFilePath">
            <summary>
            Gets or sets the source file path.
            </summary>
            <value>The source file path.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.SolutionFolder">
            <summary>
            Gets or sets the solution folder.
            </summary>
            <value>The solution folder.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.Open">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AddSolutionFolderItemFromFileAction"/> is open.
            </summary>
            <value><c>true</c> if open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>The relative path.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.Solution">
            <summary>
            Gets or sets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.Copy">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AddSolutionFolderItemFromFileAction"/> is copy.
            </summary>
            <value><c>true</c> if copy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionFolderItemFromFileAction.OutputProjectItem">
            <summary>
            A property that can be used to pass the creted item to
            a following action.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction">
            <summary>
            The action adds a file to the project item or solution item passed 
            to the action in the Content input property. 
            The other input properties of the action are 
            (a) SourceFileName - provides the name of the file 
            (b) SourceFilePath - provides the path name of the file
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.Execute">
            <summary>
            The method that creates a new item from the intput string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.Undo">
            <summary>
            Deletes the created items
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.SourceFilePath">
            <summary>
            Name of the source file path
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.TargetProject">
            <summary>
            TargetProject where the item is going to be inserted
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.SearchPattern">
            <summary>
            The searchPattern used to filter the files from the directory.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.Open">
            <summary>
            A flag to indicate if the newly created item should be shown
            in a window.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.Copy">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AddProjectItemsFromDirectoryAction"/> is copy.
            </summary>
            <value><c>true</c> if copy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.ProjectItem">
            <summary>
            ProjectItem where the item is going to be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddProjectItemsFromDirectoryAction.ProjectItems">
            <summary>
            Returns the ProjectItem collection added.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionGlobalsEntryAction">
            <summary>
            Action that saves an entry into the solution globals section
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionGlobalsEntryAction.OnExecute(System.Object)">
            <summary>
            Called when [execute].
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionGlobalsEntryAction.Solution">
            <summary>
            Gets or sets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionItemFromFileAction">
            <summary>
            Action that adds an item to the solution
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionItemFromFileAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionItemFromFileAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.AddSolutionItemFromFileAction.SourceFile">
            <summary>
            Gets or sets the source file.
            </summary>
            <value>The source file.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileProjectAction">
            <summary>
            Action that compiles a Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileProjectAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileProjectAction.ThrowException">
            <summary>
            Gets or sets a value indicating whether [throw exception].
            </summary>
            <value><c>true</c> if [throw exception]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileSolutionAction">
            <summary>
            Action that compiles the solution
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileSolutionAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileSolutionAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.CompileSolutionAction.ThrowException">
            <summary>
            Gets or sets a value indicating whether [throw exception].
            </summary>
            <value><c>true</c> if [throw exception]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugProjectAction">
            <summary>
            Action that debugs a Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugProjectAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugWebProjectAction">
            <summary>
            Action that debugs a Web Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugWebProjectAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugWebProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugWebProjectAction.StartPage">
            <summary>
            Gets or sets the start page.
            </summary>
            <value>The start page.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DebugWebProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectAction">
            <summary>
            Deletes an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectAction.Execute">
            <summary>
            Delete an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectAction.Undo">
            <summary>
            This method do nothing
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectItemAction">
            <summary>
            Action that deletes an item from a project item
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectItemAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectItemAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectItemAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteItemIfExistsFromProjectItemAction.InputProjectItem">
            <summary>
            Gets or sets the input project item.
            </summary>
            <value>The input project item.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectAction">
            <summary>
            Action that deletes a Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectAction.Execute">
            <summary>
            Delete Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectAction.Project">
            <summary>
            Gets or sets the project to delete.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectAction.DeleteProjectFiles">
            <summary>
            Gets or sets if you want to delete the project file (csproj) and bin obj dirs 
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction">
            <summary>
            Action that deletes ProjectItems content filtering by the input kind guid
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.Execute">
            <summary>
            Delete ProjectItems content filtering by the input kind guid
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.ProjectItems">
            <summary>
            Gets or sets the project items.
            </summary>
            <value>The project items.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.Kind">
            <summary>
            Gets or sets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.ProjectItem">
            <summary>
            Gets or sets the project item.
            </summary>
            <value>The project item.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteProjectItemsAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteSolutionItemIfExistsFromProjectAction">
            <summary>
            Deletes an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteSolutionItemIfExistsFromProjectAction.Execute">
            <summary>
            Delete an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteSolutionItemIfExistsFromProjectAction.Undo">
            <summary>
            This method do nothing
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteSolutionItemIfExistsFromProjectAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.DeleteSolutionItemIfExistsFromProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.ExecuteVSCommandAction">
            <summary>
            Action that executes a generic Vs Command
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.ExecuteVSCommandAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.ExecuteVSCommandAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.ExecuteVSCommandAction.VSCommand">
            <summary>
            Gets or sets the VS command.
            </summary>
            <value>The VS command.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.ExecuteVSCommandAction.VSCommandArguments">
            <summary>
            Gets or sets the VS command arguments.
            </summary>
            <value>The VS command arguments.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetProjectByNameAction">
            <summary>
            Gets a proyect by name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetProjectByNameAction.Execute">
            <summary>
            Delete an item from a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetProjectByNameAction.Undo">
            <summary>
            This method do nothing
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetProjectByNameAction.ProjectName">
            <summary>
            Gets or sets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetProjectByNameAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction">
            <summary>
            GetSolutionGlobalsEntryAction class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction.Solution">
            <summary>
            Gets or sets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.GetSolutionGlobalsEntryAction.VariableValue">
            <summary>
            Gets or sets the variable value.
            </summary>
            <value>The variable value.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenDocumentationFileAction">
            <summary>
            Action that opens a file in a designer window
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenDocumentationFileAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenDocumentationFileAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenDocumentationFileAction.DocumentationFileName">
            <summary>
            Name of html documentation file
            </summary>
            
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenDocumentationFileAction.RelativeDocumentationFilePath">
            <summary>
            Relative Path to the documentation file
            </summary>
            
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenFileInBrowserAction">
            <summary>
            OpenFileInBrowserAction class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenFileInBrowserAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenFileInBrowserAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenFileInBrowserAction.DocumentationFileName">
            <summary>
            Name of html documentation file
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.OpenFileInBrowserAction.RelativeDocumentationFilePath">
            <summary>
            Relative Path to the documentation file
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunProjectAction">
            <summary>
            Action that runs project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunProjectAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunWebProjectAction">
            <summary>
            Action that runs a web project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunWebProjectAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunWebProjectAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunWebProjectAction.StartPage">
            <summary>
            Gets or sets the start page.
            </summary>
            <value>The start page.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.RunWebProjectAction.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction">
            <summary>
            Updates the VS status bar object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.OnSited">
            <summary>
            When implemented by a class, allows descendants to
            perform processing whenever the component is being sited.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.UpdateStatus(System.String,System.Object[])">
            <summary>
            Updates the status.
            </summary>
            <param name="text">The text.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.UpdateStatusWarning(System.String)">
            <summary>
            Updates the status warning.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.UpdateStatusWarning(System.String,System.Object[])">
            <summary>
            Updates the status warning.
            </summary>
            <param name="text">The text.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.Progress(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Progresses the specified in progress.
            </summary>
            <param name="inProgress">if set to <c>true</c> [in progress].</param>
            <param name="label">The label.</param>
            <param name="amountCompleted">The amount completed.</param>
            <param name="total">The total.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.Execute">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Execute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.OnExecute">
            <summary>
            Called when [execute].
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.Undo">
            <summary>
            See <see cref="M:Microsoft.Practices.RecipeFramework.IAction.Undo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.StatusBarAction.OnUndo">
            <summary>
            Called when [undo].
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.UnfoldTemplateIfProjectNotExistsAction">
            <summary>
            Action that unfolds a Vs Template
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.UnfoldTemplateIfProjectNotExistsAction.Execute">
            <summary>
            Unfolds the template
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.UnfoldTemplateIfProjectNotExistsAction.Undo">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Actions.VisualStudio.UnfoldTemplateIfProjectNotExistsAction.IsWeb">
            <summary>
            Gets or sets a value indicating whether this instance is web.
            </summary>
            <value><c>true</c> if this instance is web; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.CodeDomHelper">
            <summary>
            Provides utility methods for working with CodeDom
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.CodeDomHelper.ConvertToValidIdentifier(System.String)">
            <summary>
            Converts to a valid identifier, or throws an exception if
            that is not possible
            </summary>
            <param name="value">The value to convert</param>
            <returns>A valid C# identifier</returns>
            <exception cref="T:System.ArgumentException">The value cannot be converted to a valid identifier</exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.CodeDomHelper.IsValidIdentifier(System.String)">
            <summary>
            Determines whether [is valid identifier] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is valid identifier] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.CodeDomHelper.GetValidIdentifier(System.String)">
            <summary>
            Gets a valid identifier.
            </summary>
            <param name="value">The value to create a valid indetifier from.</param>
            <returns>A valid C# identifier</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.CodeDomHelper.IsValidNamespace(System.String)">
            <summary>
            Determines if the string is a valid namespace
            </summary>
            <param name="value">The string to validate</param>
            <returns>True if it's valid for a namespace</returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2">
            <summary>
            Provides utility methods for working with the DTE.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPath(System.Object)">
            <summary>
            Builds a path to the element, detecting automatically the 
            type of element and building an appropriate path to it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPath(EnvDTE.SelectedItem)">
            <summary>
            Gets an string representation from the current selected item in the solution explorer window.
            </summary>
            <param name="toSelectedItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPath(EnvDTE.Project)">
            <summary>
            Gets an string representatio from <paramref name="toProject"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPath(EnvDTE.ProjectItem)">
            <summary>
            Gets an string representation from <paramref name="toItem"/>
            </summary>
            <param name="toItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPathFromCollection(EnvDTE.ProjectItems,EnvDTE.ProjectItem,System.String@)">
            <summary>
            Builds a virtual path from an ancestor collection of items to 
            a particular instance, which can be any number of levels of nesting 
            down the hierarchy.
            </summary>
            <param name="items">The parent collection of items.</param>
            <param name="target">The item to locate in the hierarchy.</param>
            <param name="path">The path being built.</param>
            <returns>Whether the item was found in the hierarchy of items.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.BuildPathToFolder(EnvDTE.Project,EnvDTE.Project,System.String@)">
            <summary>
            Recursively tries to build a path from the parent project to the child one. 
            Returns true if the path can be built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProject(EnvDTE._DTE,System.Predicate{EnvDTE.Project})">
            <summary>
            Retrieves the first project in the solution that matches the specified criteria.
            </summary>
            <param name="vs">The VS instance.</param>
            <param name="match">The predicate condition.</param>
            <returns>The project found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByAssemblyName(EnvDTE._DTE,System.String)">
            <summary>
            Finds a project in the solution, given its output assembly name.
            </summary>
            <returns>A <see cref="T:EnvDTE.Project"/> reference or <see langword="null"/> if 
            it doesn't exist. Project can be C# or VB.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByName(EnvDTE._DTE,System.String)">
            <summary>
            Finds a project in the solution, given its name.
            </summary>
            <returns>A <see cref="T:EnvDTE.Project"/> reference or <see langword="null"/> if 
            it doesn't exist. Project can be C# or VB.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindSolutionFolderByPath(EnvDTE.Solution,System.String)">
            <summary>
            Finds a solution folder in the solution hierarchy, given its 
            folder-like location path. 
            </summary>
            <returns>The solution folder or <see langword="null"/> if 
            it doesn't exist.</returns>
            <remarks>
            Note that this method performs the same work as <see cref="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByPath(EnvDTE.Solution,System.String)"/>, 
            but only returns an instance if the project is actually 
            an <see cref="T:EnvDTE80.SolutionFolder"/>. This is because solution folders 
            are represented as <see cref="T:EnvDTE.Project"/> elements in Visual Studio.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByPath(EnvDTE.Solution,System.String)">
            <summary>
            Finds a project in the solution hierarchy, given its 
            folder-like location path. Note that solution folders will 
            also be returned, as they are represented as <see cref="T:EnvDTE.Project"/> elements 
            in Visual Studio, and the actual folder can be retrieved by casting  
            the returned project property to 
            <see cref="T:EnvDTE80.SolutionFolder"/>.
            </summary>
            <returns>The project or <see langword="null"/> if 
            it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindItemByName(EnvDTE.ProjectItems,System.String,System.Boolean)">
            <summary>
            Finds a project item in the received collection, given its name.
            </summary>
            <param name="collection">The initial collection to start the search.</param>
            <param name="name">The name of the item to locate.</param>
            <param name="recursive">Specifies whether to search in items collections in turn.</param>
            <returns>A <see cref="T:EnvDTE.Project"/> reference or <see langword="null"/> if 
            it doesn't exist. Project can be C# or VB.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindItemByName(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)">
            <summary>
            Finds a project item in the received IVsHierarchy, given its name.
            </summary>
            <param name="projectHierarchy">The IVsHierarchy to start the search.</param>
            <param name="name">The name of the item to locate.</param>
            <returns>A <see cref="T:EnvDTE.Project"/> reference or <see langword="null"/> if 
            it doesn't exist. Project can be C# or VB.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindItemInProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)">
            <summary>
            Return if a item exist or not on a Project based on the item name.
            </summary>
            <param name="projectHierarchy">The IVsHierarchy to start the search.</param>
            <param name="name">The name of the item to locate.</param>
            <returns>A <see cref="T:EnvDTE.Project"/> reference or <see langword="bool"/> if 
            it doesn't exist. Project can be C# or VB.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindItemByPath(EnvDTE.Solution,System.String)">
            <summary>
            Finds a project item in the solution hierarchy, given its 
            folder-like location path. 
            </summary>
            <returns>The project item or <see langword="null"/> if 
            it doesn't exist.</returns>
            <remarks>
            Note that even projects and solution folders are represented 
            as project items, if they are not directly under the solution root, 
            but this method checks for the ProjectItem.Object property 
            to discard matches in this case. If the object to retrieve is a 
            project (or solution folder, which is represented as a project too, 
            and the folder is retrieved through the Project.Object property), 
            the <see cref="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByPath(EnvDTE.Solution,System.String)"/> method must be used.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindInCollection(EnvDTE.ProjectItems,System.String)">
            <summary>
            Finds an item in a collection using its path-like notation inside the hierarchy of 
            <see cref="T:EnvDTE.ProjectItems"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindHierarchyItemByPath(EnvDTE.UIHierarchyItems,System.String[],System.Int32,System.Collections.Generic.Dictionary{EnvDTE.UIHierarchyItems,System.Boolean})">
            <summary>
            UIHierarchy.GetItem does not always work :S, so I do it by hand here.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.FindProjectByGuid(EnvDTE.Solution,System.Guid)">
            <summary>
            Returns a Project based on its GUID
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetTarget(EnvDTE._DTE)">
            <summary>
            Retrieves the currently selected target in the solution explorer.
            </summary>
            <remarks>
            If there's only one item selected, then the corresponding EnvDTE.Solution, Project 
            or ProjectItem element is returned. Otherwise, the <see cref="T:EnvDTE.SelectedItems"/> 
            property is returned.
            </remarks>
            <exception cref="T:System.InvalidOperationException">There's no current selection in the solution explorer.</exception>
            <returns>The current selection.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetDefaultExtension(EnvDTE.Project)">
            <summary>
            Retrieves the code file extension for the project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetProjectNamespace(EnvDTE.Project)">
            <summary>
            Retrieves a default namespace to use for project items.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetSelectedProject(EnvDTE._DTE)">
            <summary>
            Retrieves the project currently selected, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetFilePathRelative(EnvDTE.ProjectItem)">
            <summary>
            Returns the item file name relative to the containing solution.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetFilePathRelative(EnvDTE._DTE,System.String)">
            <summary>
            Turns the file name received into a path relative to the containing solution.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetPathFull(EnvDTE._DTE,System.String)">
            <summary>
            Turns the relative file name received into full path, based on the containing solution location.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetProjectGuid(System.IServiceProvider,EnvDTE.Project)">
            <summary>
            Returns a project GUID
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.SelectSolution(EnvDTE._DTE)">
            <summary>
            Selects the solution in the solution explorer.
            </summary>
            <returns>Whether the selection was successful.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.SelectItem(EnvDTE._DTE,System.String)">
            <summary>
            Selects a solution explorer item, based on 
            its relative path with regards to the solution.
            </summary>
            <remarks>
            If selection fails, returned object will be null.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.SelectItem(EnvDTE._DTE,System.Object)">
            <summary>
            Selects an item by unfolding , based on 
            its relative path with regards to the solution.
            </summary>
            <remarks>
            If selection fails, returned object will be null too.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.IsWebProject(EnvDTE.Project)">
            <summary>
            Determines whether the project is a web project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.IsWebReference(EnvDTE.ProjectItem)">
            <summary>
            Determines if the project item is a web reference.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetCurrentSelection(System.IServiceProvider)">
            <summary>
            Gets the current selected IVsHierarchy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetCurrentSelection(System.IServiceProvider,System.UInt32@)">
            <summary>
            Gets the current selected IVsHierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetVsHierarchy(System.IServiceProvider,EnvDTE.Project)">
            <summary>
            Gets the IVsHierarchy from <paramref name="project"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.CoCreateInstance(System.IServiceProvider,System.Type,System.Type)">
            <summary>
            Creates an instance of a COM object declared in the local registry of VisualStudio
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.ForEachProject(EnvDTE.Solution,System.Predicate{EnvDTE.Project})">
            <summary>
            Iterates all the projects in the solution, irrespective of their depth in the 
            solution hierarchy of items.
            </summary>
            <param name="solution">The solution to iterate looking for projects.</param>
            <param name="processAndBreak">Delegate to perform processing for each project found. 
            The return value signals whether further iteration should continue or not.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.ReplaceParameters(System.String,System.ComponentModel.Design.IDictionaryService)">
            <summary>
            Replaces parameters in the format used by VS templates ($ArgumentName$) 
            using the values in the replacement dictionary provided.
            </summary>
            <remarks>
            The replacement is performed for multiple parameters. However, if a 
            parameter doesn't have a value in the dictionary, replacement of 
            further parameters will stop and the resulting string returned as-is, 
            with the values replaced so far, and the remaining parameters.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.EnumHierarchyItems(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.ProcessHierarchyNode)">
            <summary>
            Returns a list of Hierarchy items
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.EnumHierarchyItems(Microsoft.VisualStudio.Shell.Interop.IVsSolution,Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.ProcessHierarchyNode)">
            <summary>
            Returns a list of Hierarchy items
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.GetItemId(System.Object)">
            <summary>
            Gets the item id.
            </summary>
            <param name="pvar">VARIANT holding an itemid.</param>
            <returns>Item Id of the concerned node</returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelper2.ProcessHierarchyNode">
            <summary>
            Delegate for processing nodes
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx">
            <summary>
            Provides extended utility methods for working with the DTE (see <see cref="T:Microsoft.Practices.RecipeFramework.Library.DteHelper"/> class).
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CurrentWebsiteLanguagePropertyItem">
            <summary>
            Key to access the CurrentWebsiteLanguage property of a project.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CurrentWebsiteLanguagePropertyValue">
            <summary>
            Value of the CurrentWebsiteLanguage property of a project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.FindProject(EnvDTE._DTE,System.Predicate{EnvDTE.Project})">
            <summary>
            Retrieves the first <see cref="T:EnvDTE.Project"/> in the solution that matches the specified criteria
            bypassing all Solution Folders.
            </summary>
            <param name="vs">The VS instance.</param>
            <param name="match">The predicate condition.</param>
            <returns>The <see cref="T:EnvDTE.Project"/> found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.FindProjectByName(EnvDTE.DTE,System.String,System.Boolean)">
            <summary>
            Finds the name of the project by.
            </summary>
            <param name="dte">The DTE.</param>
            <param name="name">The name.</param>
            <param name="isWeb">if set to <c>true</c> [is web].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.FindItem(EnvDTE._DTE,System.Predicate{EnvDTE.Project})">
            <summary>
            Retrieves the first <see cref="T:EnvDTE.ProjectItem"/> in the solution that matches the specified criteria
            bypassing all Solution Folders.
            </summary>
            <param name="vs">The VS instance.</param>
            <param name="match">The predicate condition.</param>
            <returns>The <see cref="T:EnvDTE.ProjectItem"/> found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectExists(EnvDTE.Solution,System.String,Microsoft.Practices.RecipeFramework.Extensions.Actions.CodeDom.Helpers.LanguageType)">
            <summary>
            Projects the exists.
            </summary>
            <param name="solution">The solution.</param>
            <param name="projectName">Name of the project.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.FindItemByName(EnvDTE.ProjectItems,System.String,System.Boolean)">
            <summary>
            Finds a <see cref="T:EnvDTE.ProjectItem"/> by name. 
            The comparison is not case sensitive.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.FindContainingProjectItem(EnvDTE._DTE,EnvDTE.CodeType)">
            <summary>
            Finds a ProjectItem that contains a specific CodeType
            </summary>
            <param name="dte"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.IsWebCSharpProject(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a web project and C# project
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if [is web C sharp project] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ShowMessageInOutputWindow(EnvDTE.DTE,System.String)">
            <summary>
            Shows the message in output window.
            </summary>
            <param name="dte">The DTE instance.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ShowMessageInOutputWindow(EnvDTE.DTE,System.String,System.String)">
            <summary>
            Shows the message in output window.
            </summary>
            <param name="dte">The DTE instance.</param>
            <param name="message">The message.</param>
            <param name="paneName">Name of the pane.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.GetPackageFriendlyName(System.IServiceProvider)">
            <summary>
            Gets the name of the package friendly.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.GetCodeDomProvider(EnvDTE.Project)">
            <summary>
            Gets the code DOM provider from the language of the specified project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.GetDefaultExtension(EnvDTE.Project)">
            <summary>
            Retrieves the code file extension for the project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectIterator">
            <summary>
            Project iterator that returns all projects in a solution recursivelly
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectIterator.#ctor(EnvDTE._DTE)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectIterator"/> class.
            </summary>
            <param name="dte">The DTE.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator">
            <summary>
            Iterator that returns all project items recursivelly
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator.#ctor(EnvDTE.Project)">
            <summary>
            Initializates the iterator from a project. All the project items
            will be returned by the iterator.
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator.#ctor(EnvDTE.ProjectItem)">
            <summary>
            Initializates the iterator from a project item. All the project
            items below the given one will be returned.
            </summary>
            <remarks>
            The project item given as an argument will not be returned
            by the iterator
            </remarks>
            <param name="projectItem"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates across all project items recursivelly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator.EnumerateProjectItem(EnvDTE.ProjectItem)">
            <summary>
            Iterates sub project items
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectItemIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that run across all project items recursivelly
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectReferencesIterator">
            <summary>
            Iterator that returns all the referenced projects of a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectReferencesIterator.#ctor(EnvDTE.Project)">
            <summary>
            Initializes the iterator with a project
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.ProjectReferencesIterator.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CodeElementsIterator">
            <summary>
            This iterator returns all the code elements inside a project item
            or below a specified code element recursively
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CodeElementsIterator.#ctor(EnvDTE.ProjectItem)">
            <summary>
            Initializes the iterator from a project item
            </summary>
            <param name="projectItem"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CodeElementsIterator.#ctor(EnvDTE.CodeElement)">
            <summary>
            Initializes the iterator from a code element
            </summary>
            <param name="codeElement"></param>
            <remarks>
            The specified code element is not returned by the iterator
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.DteHelperEx.CodeElementsIterator.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ExceptionHelper">
            <summary>
            Helper class for handling exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ExceptionHelper.BuildErrorMessage(System.Exception)">
            <summary>
            Builds the error messsage.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ExpressionEvaluationHelper">
            <summary>
            Helper class to evaluate expressions using <see cref="T:Microsoft.Practices.RecipeFramework.Library.ExpressionEvaluationService"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ExpressionEvaluationHelper.EvaluateExpression(System.ComponentModel.Design.IDictionaryService,System.String)">
            <summary>
            Evaluates an expression using <see cref="T:Microsoft.Practices.RecipeFramework.Library.ExpressionEvaluationService"/>
            </summary>
            <param name="dictionary">An instance of <see cref="T:System.ComponentModel.Design.IDictionaryService"/></param>
            <param name="expression">Expression to evaluate</param>
            <returns>The result as an object</returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper">
            <summary>
            Helper for FileCodeModel manipulation
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.AddAttribute(EnvDTE.CodeClass,System.String,System.String)">
            <summary>
            Adds the attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.AddAttribute(EnvDTE.CodeProperty,System.String,System.String)">
            <summary>
            Adds the attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.UpdateCodeAttributeArgument(EnvDTE.CodeElements,System.String,System.String,System.String)">
            <summary>
            Updates the code attribute argument.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="argumentValue">The argument value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.UpdateCodeAttributeArgument(EnvDTE.CodeElements,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the code attribute argument.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="createIfNew">if set to <c>true</c> [create if new].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.UpdateCodeAttributeArgument(EnvDTE.CodeAttribute,System.String,System.String,System.Boolean)">
            <summary>
            Updates the code attribute argument.
            </summary>
            <param name="codeAttribute">The code attribute.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="argumentValue">The argument value.</param>
            <param name="createIfNew">if set to <c>true</c> [create if new].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.HasAttribute(EnvDTE.CodeClass,System.String)">
            <summary>
            Determines whether the specified element has attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>
            	<c>true</c> if the specified element has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.HasAttribute(EnvDTE.CodeInterface,System.String)">
            <summary>
            Determines whether the specified element has attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>
            	<c>true</c> if the specified element has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.HasAttribute(EnvDTE.CodeProperty,System.String)">
            <summary>
            Determines whether the specified element has attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>
            	<c>true</c> if the specified element has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.GetCodeElement(EnvDTE.DTE,EnvDTE.FileCodeModel,System.Type)">
            <summary>
            Gets the code element.
            </summary>
            <param name="vs">The vs.</param>
            <param name="fileCodeModel">The file code model.</param>
            <param name="codeElementType">Type of the code element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.AddProperty(EnvDTE.CodeClass,EnvDTE.CodeVariable)">
            <summary>
            Adds the property.
            </summary>
            <param name="codeClass">The code class.</param>
            <param name="var">The var.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.FindCodeElementFromType(EnvDTE.Project,System.String,EnvDTE.vsCMElement)">
            <summary>
            Finds the type of the code element from the specified project.
            </summary>
            <param name="project">The project.</param>
            <param name="typeName">Name of the type.</param>
            <param name="elementKind">Kind of the element.</param>
            <returns>
            The <see cref="T:EnvDTE.CodeElement"/> found or null if no matches.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.FindCodeElementFromType(EnvDTE.CodeElement,System.String,EnvDTE.vsCMElement)">
            <summary>
            Finds the type of the code element from the specified CodeType.
            </summary>
            <param name="element">The element.</param>
            <param name="typeName">Name of the type.</param>
            <param name="elementKind">Kind of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.FileCodeModelHelper.FormatPropertyName(System.String)">
            <summary>
            Formats the name of the property.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibilityHelper">
            <summary>
            Helper methods to work with project responsibilities
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibilityHelper.IsProjectResponsible(EnvDTE.Project,System.String)">
            <summary>
            Verifies if a project has a specified responsibility
            </summary>
            <param name="project">The project</param>
            <param name="responsibility">The responsibility</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibilityHelper.TypeDefinedInResponsibleProject(EnvDTE.DTE,System.Type,System.String)">
            <summary>
            Verifies if a type is defined in a project with a specific responsibility
            </summary>
            <param name="dte">DTE context</param>
            <param name="type">The type to verify</param>
            <param name="responsibility">The responsibility</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibleProjectFinder">
            <summary>
            Walk through the given solution and find the
            projects that have been given particular responsibilities.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibleProjectFinder.#ctor(EnvDTE.DTE)">
            <summary>
            Create finder object.
            </summary>
            <param name="dte">The VS environment to search for projects.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.ResponsibleProjectFinder.FindProjectsWithResponsibility(System.String)">
            <summary>
            Finds a list of projects in the solution with a responsibility
            </summary>
            <param name="responsibility"></param>
            <returns>The list of projects with that reponsibility</returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.TypeHelper">
            <summary>
            Helper methods for working with types
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.TypeHelper.ParseGenericType(System.String)">
            <summary>
            Converts a generic type name with angle brackets to the CLR notation.
            If the type is not a generic type name, returns the same value unchanged
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper">
            <summary>
            Helper methods to deal with DTE to VSIP project model conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.ToHierarchy(EnvDTE.Project)">
            <summary>
            Toes the hierarchy.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.ToVSProject(EnvDTE.Project)">
            <summary>
            Toes the vs project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.ToDteProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Toes the DTE project.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.ToDteProject(Microsoft.VisualStudio.Shell.Interop.IVsProject)">
            <summary>
            Toes the DTE project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.GetProjectServiceProvider(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the project service provider.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.GetProjectServiceProvider(Microsoft.VisualStudio.Shell.Interop.IVsProject)">
            <summary>
            Gets the project service provider.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.VsHelper.GetProjectServiceProvider(EnvDTE.Project)">
            <summary>
            Gets the project service provider.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.X509CertificateHelper">
            <summary>
            Helper class for <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> certificates.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.X509CertificateHelper.GetFindValue(System.Security.Cryptography.X509Certificates.X509FindType,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Gets the find value.
            </summary>
            <param name="findType">Type of the find.</param>
            <param name="value">The value.</param>
            <returns>The find value formated as string.</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.CommonHelpers.X509CertificateHelper.GetSubjectDistinguishedName(System.String)">
            <summary>
            Gets the name of the subject distinguished.
            </summary>
            <param name="subjectName">Name of the subject.</param>
            <returns>Returns the SubjectDistinguishedName under the form: CN={DistinguishedName}</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.ReplaceableExtension.#cctor">
            <summary>
            Initializes the <see cref="T:ReplaceableExtension"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.ReplaceableExtension.IsReplaceable(System.String)">
            <summary>
            Determines whether the specified item file name is replaceable.
            </summary>
            <param name="itemFileName">Name of the item file.</param>
            <returns>
            	<c>true</c> if the specified item file name is replaceable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.IVSTemplateExporter">
            <summary>
            Interface for the Template exporter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.IVSTemplateExporter.Export">
            <summary>
            Exports this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VSProjectTemplate"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateRootNode">
            <summary>
            Creates the root node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateTemplateDataNode">
            <summary>
            Creates the template data node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateTemplateContentNode">
            <summary>
            Creates the template content node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateProjectNode(System.String)">
            <summary>
            Creates the project node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateFolderNode(System.String)">
            <summary>
            Creates the folder node.
            </summary>
            <param name="folderName">Name of the folder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateProjectItemNode(System.String,System.Boolean)">
            <summary>
            Creates the project item node.
            </summary>
            <param name="item">The item.</param>
            <param name="replaceParameters">if set to <c>true</c> [replace parameters].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateWizardExtensionNode">
            <summary>
            Creates the wizard extension node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateWizardDataNode">
            <summary>
            Creates the wizard data node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.Save(System.String,System.String)">
            <summary>
            Saves the specified output directory.
            </summary>
            <param name="outputDirectory">The output directory.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.ProjectType">
            <summary>
            Gets or sets the type of the project.
            </summary>
            <value>The type of the project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.ProjectSubType">
            <summary>
            Gets or sets the type of the sub project.
            </summary>
            <value>The type of the sub project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.CreateNewFolder">
            <summary>
            Gets or sets a value indicating whether [create new folder].
            </summary>
            <value><c>true</c> if [create new folder]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.DefaultName">
            <summary>
            Gets or sets the name of the default.
            </summary>
            <value>The name of the default.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.ProvideDefaultName">
            <summary>
            Gets or sets a value indicating whether [provide default name].
            </summary>
            <value><c>true</c> if [provide default name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.LocationField">
            <summary>
            Gets or sets the location field.
            </summary>
            <value>The location field.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.EnableLocationBrowseButton">
            <summary>
            Gets or sets a value indicating whether [enable location browse button].
            </summary>
            <value>
            	<c>true</c> if [enable location browse button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplate.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VSSolutionTemplate"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateRootNode">
            <summary>
            Creates the root node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateTemplateDataNode">
            <summary>
            Creates the template data node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateTemplateContentNode">
            <summary>
            Creates the template content node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateProjecCollectiontNode">
            <summary>
            Creates the projec collectiont node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateSolutionFolderNode(System.String)">
            <summary>
            Creates the solution folder node.
            </summary>
            <param name="solutionFolderName">Name of the solution folder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateProjectTemplateLinkNode(System.String,System.String)">
            <summary>
            Creates the project template link node.
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="relativeTemplatePath">The relative template path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateWizardExtensionNode">
            <summary>
            Creates the wizard extension node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateWizardDataNode">
            <summary>
            Creates the wizard data node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.Save(System.String,System.String)">
            <summary>
            Saves the specified output directory.
            </summary>
            <param name="outputDirectory">The output directory.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.ProjectType">
            <summary>
            Gets or sets the type of the project.
            </summary>
            <value>The type of the project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.CreateNewFolder">
            <summary>
            Gets or sets a value indicating whether [create new folder].
            </summary>
            <value><c>true</c> if [create new folder]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.DefaultName">
            <summary>
            Gets or sets the name of the default.
            </summary>
            <value>The name of the default.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.ProvideDefaultName">
            <summary>
            Gets or sets a value indicating whether [provide default name].
            </summary>
            <value><c>true</c> if [provide default name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter">
            <summary>
            The VS solution template exporter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.#ctor(EnvDTE.Solution,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VSSolutionTemplateExporter"/> class.
            </summary>
            <param name="solution">The solution.</param>
            <param name="outputDirectory">The output directory.</param>
            <param name="projectsDirectory">The projects directory.</param>
            <param name="solutionTemplateIconFile">The solution template icon file.</param>
            <param name="projectsTemplateIconFile">The projects template icon file.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.Export">
            <summary>
            Exports this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.AddAssetsToTemplate(EnvDTE.Project,Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplate,System.Xml.XmlNode)">
            <summary>
            Adds the project to template.
            </summary>
            <param name="project">The project.</param>
            <param name="vsTemplate">The vs template.</param>
            <param name="contextNode">The context node.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.Solution">
            <summary>
            Gets or sets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.ProjectsDirectory">
            <summary>
            Gets or sets the projects directory.
            </summary>
            <value>The projects directory.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.SolutionTemplateIconFile">
            <summary>
            Gets or sets the solution template icon file.
            </summary>
            <value>The solution template icon file.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSSolutionTemplateExporter.ProjectsTemplateIconFile">
            <summary>
            Gets or sets the projects template icon file.
            </summary>
            <value>The projects template icon file.</value>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateDirectoryIfNotExists(System.String)">
            <summary>
            Creates the directory if not exists.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateWizardExtensionNode(System.Xml.XmlDocument)">
            <summary>
            Creates the wizard extension node.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateWizardDataNode(System.Xml.XmlDocument)">
            <summary>
            Creates the wizard data node.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates the node.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <param name="nodeName">Name of the node.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates the node.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="nodeInnerText">The node inner text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateNode(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Creates the node.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="nodeNamespace">The node namespace.</param>
            <param name="nodeInnerText">The node inner text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.CreateAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="vsTemplate">The vs template.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.ReplaceVariables(System.String,System.String)">
            <summary>
            Replaces the variables.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="rootNamespace">The root namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.Helpers.VSTemplateExporterHelper.GetProjectName(System.String)">
            <summary>
            Gets the name of the project.
            </summary>
            <param name="uniqueName">Name of the unique.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter">
            <summary>
            Template exporter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.#ctor(EnvDTE.Project,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VSWebProjectTemplateExporter"/> class.
            </summary>
            <param name="project">The project.</param>
            <param name="projectTemplateIconFile">The project template icon file.</param>
            <param name="outputDirectory">The output directory.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.Export">
            <summary>
            Exports this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.CopyProjectFile(System.String,System.String)">
            <summary>
            Copies the project file.
            </summary>
            <param name="projectFileName">Name of the project file.</param>
            <param name="destinationBaseDir">The destination base dir.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.Project">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Common.Templates.VSProjectTemplateExporter.ProjectTemplateIconFile">
            <summary>
            Gets or sets the projects template icon file.
            </summary>
            <value>The projects template icon file.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter">
            <summary>
            Converter class that can group other <see cref="T:System.ComponentModel.StringConverter"/> classes. 
            The converter types should be added as an attribute with the prefix name 'AddConverter' and any ordinal character.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.AddConverterPrefixAttribute">
            <summary>
            Add this profix to all your agregated converters as a prefix attribute.
            Usage: AddConverter1="MyConverter1Type, MyAssembly" AddConverter2="MyConverter2Type, MyAssembly" ...
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AgregatorStringConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a <see cref="T:System.String"></see> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed. </exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"></see> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"></see> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"></see> representing the given <see cref="T:System.Collections.IDictionary"></see>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"></see> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"></see> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"></see> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.OnConfigure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Called when <see cref="M:Microsoft.Practices.Common.IAttributesConfigurable.Configure(System.Collections.Specialized.StringDictionary)"/> method is called.
            </summary>
            <remarks>
            Override this method if you inherit from this class and want to add some converters to 
            the attributes collection.
            </remarks>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.AgregatorStringConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.Boolean2StringConverter">
            <summary>
            Converts a boolean into a string representation
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.Boolean2StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value object to a Boolean object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> that specifies the culture to which to convert.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.FormatException">value is not a valid value for the target type. </exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.Boolean2StringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.Boolean2StringConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionSettingsInfo">
            <summary>
            Provides helper methods for managing connection string settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionSettingsInfo.GetSection(EnvDTE.DTE)">
            <summary>
            Retrieves the connection strings section from the selected project in VS.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionSettingsInfo.GetSection(EnvDTE.Project)">
            <summary>
            Retrieves the connection strings section from the given project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionSettingsInfo.GetSection(System.String)">
            <summary>
            Retrieves the connection strings section from the given file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionSettingsInfo.GetSection(System.String,System.Configuration.Configuration@)">
            <summary>
            Retrieves the connection strings section from the given file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter">
            <summary>
            Provides a converter that can show a list of connection strings defined in the current 
            application configuration file.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.ConfigurationItemArgument">
            <summary>
            Optional configuration attribute that specifies an argument that holds the 
            file name to use to retrieve the settings from.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Determines if the value received is valid according to the current application 
            configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This converter only supports conversions to string and to <see cref="T:System.Configuration.ConnectionStringSettings"/> 
            <paramref name="destinationType"/> types.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a value to the target type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Configuration.ConnectionStringSettings"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns <see langword="true"/> as the converter supports providing a list of values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns <see langword="true"/> because the user must pick a value provided in the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Provides the list of valid values to choose from for the connection string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.CompareConnectionStringSettings(System.Configuration.ConnectionStringSettings,System.Configuration.ConnectionStringSettings)">
            <summary>
            Compares the connection string settings.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ConnectionStringConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectWithResponsibilityConverter">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectWithResponsibilityConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectWithResponsibilityConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectWithResponsibilityConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectWithResponsibilityConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringOverwritableConverter">
            <summary>
            Converter class that groups several converters that validate a code file
            to be added in a VS project.
            </summary>
            <remarks>
            The converters used are:
            - <see cref="T:Microsoft.Practices.RecipeFramework.Library.Converters.CodeIdentifierStringConverter"/>
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidFileNameConverter"/>
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringOverwritableConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VsAddCodeFileStringOverwritableConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringOverwritableConverter.OnConfigure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Called when <see cref="M:Microsoft.Practices.Common.IAttributesConfigurable.Configure(System.Collections.Specialized.StringDictionary)"/> method is called.
            </summary>
            <param name="attributes">The attributes.</param>
            <remarks>
            Override this method if you inherit from this class and want to add some converters to
            the attributes collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddValidFileStringConverter">
            <summary>
            Converter class that groups several converters that validate a file
            to be added in a VS project.
            </summary>
            <remarks>
            The converters used are:
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidFileNameConverter"/>
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddValidFileStringConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VsAddValidFileStringConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddValidFileStringConverter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VsAddCodeFileStringConverter"/> class 
            and load the properties for the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter"/> converter.
            </summary>
            <remarks>This constructor is likely to be used from code rather than from a recipe.</remarks>
            <param name="projectArgument">The project argument.</param>
            <param name="itemPostfix">The item postfix.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddValidFileStringConverter.OnConfigure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Called when <see cref="M:Microsoft.Practices.Common.IAttributesConfigurable.Configure(System.Collections.Specialized.StringDictionary)"/> method is called.
            </summary>
            <param name="attributes">The attributes.</param>
            <remarks>
            Override this method if you inherit from this class and want to add some converters to
            the attributes collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.CSharpIdentifierConverter">
            <summary>
            Converts strings to valid C# identifiers
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.CSharpIdentifierConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CSharpIdentifierConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.CSharpIdentifierConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a <see cref="T:System.String"></see> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed. </exception>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.CSharpNamespaceConverter">
            <summary>
            Converter that determines if the string is a valid namespace according to CSharp language conventions.  
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.CSharpNamespaceConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidLanguageIndependentIdentifierConverter">
            <summary>
            A converter that validates that the input value is a valid .NET identifier (i.e. valid method,
            property, class name, etc.)
            </summary>
            <remarks>
            See <see cref="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidLanguageIndependentIdentifierConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringConverter">
            <summary>
            Converter class that groups several converters that validate a code file
            to be added in a VS project.
            </summary>
            <remarks>
            The converters used are:
            - <see cref="T:Microsoft.Practices.RecipeFramework.Library.Converters.CodeIdentifierStringConverter"/>
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidFileNameConverter"/>
            - <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VsAddCodeFileStringConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringConverter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VsAddCodeFileStringConverter"/> class 
            and load the properties for the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter"/> converter.
            </summary>
            <remarks>This constructor is likely to be used from code rather than from a recipe.</remarks>
            <param name="projectArgument">The project argument.</param>
            <param name="itemPostfix">The item postfix.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.VsAddCodeFileStringConverter.OnConfigure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Called when <see cref="M:Microsoft.Practices.Common.IAttributesConfigurable.Configure(System.Collections.Specialized.StringDictionary)"/> method is called.
            </summary>
            <param name="attributes">The attributes.</param>
            <remarks>
            Override this method if you inherit from this class and want to add some converters to
            the attributes collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter">
            <summary>
            Converter class that gives the user the option to overwrite  
            the specified item if it already exists. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.ProjectArgument">
            <summary>
            The proyect where is located the selected item
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.ItemPostfixArgument">
            <summary>
            Postfix that will be added to the item to overwrite.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.MonitorArgument">
            <summary>
            Validates the specified argument instead of the current argument value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OverwriteItemConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OverwriteItemConverter"/> class.
            </summary>
            <param name="projectArgument">The project argument.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OverwriteItemConverter"/> class.
            </summary>
            <param name="projectArgument">The project argument.</param>
            <param name="itemPostfix">The item postfix.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.IsValid(System.IServiceProvider,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="service">The <see cref="T:System.IServiceProvider"/> value.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.OverwriteItemConverter.Microsoft#Practices#Common#IAttributesConfigurable#Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the specified attributes.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter">
            <summary>
            Converter that validates a path. The path should be rooted and 
            if does not exists, prompts the user for creation (if configured) and
            alerts the user if the path contains files/folder (if configured).
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.ValidateEmptyFolderArgument">
            <summary>
            Optional configuration attribute that validates the specified path/folder should be empty.
            Only returns true if the folder is empty.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.ValidateNewFolderArgument">
            <summary>
            Optional configuration attribute that validates if the folder is new and in that case it will
            ask the user to confirm the creation of the new folder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.#ctor">
            <summary>
            Construct a new PathConverter object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Construct a new PathConverter object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.PathConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.FileExistsConverter">
            <summary>
            Converter that validates a file path
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.FileExistsConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectExistsConverter">
            <summary>
            Converter that verifies if a project already exists on the file system
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectExistsConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectExistsConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectItemExistsConverter">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectItemExistsConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectItemExistsConverter.FindItemByName(EnvDTE.ProjectItems,System.String,System.Boolean)">
            <summary>
            Finds the name of the item by.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ProjectItemExistsConverter.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.TypeFromStringConverter">
            <summary>
            Converter that converts a string into an type
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.TypeFromStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a <see cref="T:System.String"></see> object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed. </exception>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.TypeFromStringConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.UriConverter">
            <summary>
            A converter that validates an absolute Uri string.
            For an <see cref="T:System.Uri"/> type converter use <see cref="T:System.UriTypeConverter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.UriConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidFileNameConverter">
            <summary>
            Converter class that validates the name of a file or folder.
            Files and Folders cannot:
               -be empty strings
               - contain any of the following characters: / ? : * "  > | # %
               - contain Unicode control characters
               - contain surrogate characters
               - be system reserved names, including 'CON', 'AUX', 'PRN', 'COM1' or 'LPT2'
               - be '.' or '..'
               - Have lenghts greater than 245 characters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.ValidFileNameConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Converters.XmlNamespaceStringConverter">
            <summary>
            A converter that validates that each of the parts of an XML namespace name (in <see cref="T:System.Uri"/> format) is
            a valid Xml namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Converters.XmlNamespaceStringConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"></see> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.ConditionalCoordinator">
            <summary>
            Action coordination for boolean conditions.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.ConditionalCoordinator.ConditionalAttributeName">
            <summary>
            The condition attribute name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.ConditionalCoordinator.OnSited">
            <summary>
            When implemented by a class, allows descendants to
            perform processing whenever the component is being sited.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.ConditionalCoordinator.Run(System.Collections.Generic.Dictionary{System.String,Microsoft.Practices.RecipeFramework.Configuration.Action},System.Xml.XmlElement)">
            <summary>
            Runs the coordination using the configuration data specified in the configuration file.
            </summary>
            <param name="declaredActions">Actions defined in the package configuration file for the currently executing recipe.</param>
            <param name="coordinationData">The configuration data used to setup the coordination.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.FailSafeCoordinator">
            <summary>
            Action coordination that will stop execution without showing up an error dialog and will send 
            the error description to the Output window.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Coordinators.FailSafeCoordinator.Run(System.Collections.Generic.Dictionary{System.String,Microsoft.Practices.RecipeFramework.Configuration.Action},System.Xml.XmlElement)">
            <summary>
            Runs the coordination using the configuration data specified in the configuration file.
            </summary>
            <param name="declaredActions">Actions defined in the package configuration file for the currently executing recipe.</param>
            <param name="coordinationData">The configuration data used to setup the coordination.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog">
            <summary>
            Displays a dialog box and promts the user for login credentials.
            </summary>
            <remarks>
            <p>
            This dialog provide access to a feature provided by Windows XP and Windows Server 2003
            called "Stored User Names and Passwords" to associate a set of credentials with a single
            Windows user account, storing those credentials using the Data Protection API (DPAPI) (See ProtectedData class).
            </p>
            <p>
            If your application, is running on Windows XP or Windows .NET, 
            can use the Credential Management API functions to prompt the user for credentials.
            Using these APIs will provide you with a consistent user interface and
            will allow you to automatically support the caching of these credentials by the operating system.
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.#ctor">
            <summary>
            Default class initializer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog"/> class
            with the specified target.
            </summary>
            <param name="target">Contains the name of the target for the credentials, 
            typically a server name. For distributed file system (DFS) connections, 
            this string is of the form "servername\sharename".
            This parameter is used to identify Target Information when storing and retrieving credentials. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog"/> class
            with the specified target and caption.
            </summary>
            <param name="target">
            Contains the name of the target for the credentials, 
            typically a server name. For distributed file system (DFS) connections, 
            this string is of the form "servername\sharename".
            This parameter is used to identify Target Information when storing and retrieving credentials. 
            </param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog"/> class
            with the specified target, caption and message.
            </summary>
            <param name="target">
            Contains the name of the target for the credentials, 
            typically a server name. For distributed file system (DFS) connections, 
            this string is of the form "servername\sharename".
            This parameter is used to identify Target Information when storing and retrieving credentials. 
            </param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
            <param name="message">The message of the dialog (null will cause a system default message to be used).</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.#ctor(System.String,System.String,System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog"/> class
            with the specified target, caption, message and banner.
            </summary>
            <param name="target">
            Contains the name of the target for the credentials, 
            typically a server name. For distributed file system (DFS) connections, 
            this string is of the form "servername\sharename".
            This parameter is used to identify Target Information when storing and retrieving credentials. 
            </param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
            <param name="message">The message of the dialog (null will cause a system default message to be used).</param>
            <param name="banner">The image to display on the dialog (null will cause a system default image to be used).</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.ConfirmCredentials(System.Boolean)">
            <summary>
            The ConfirmCredentials method is called after ShowDialog,
            to confirm the validity of the credential harvested. 
            </summary>
            <remarks>
            After calling ShowDialog and before calling <see cref="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.ConfirmCredentials(System.Boolean)"/>, 
            the caller must determine whether or not the credentials are actually valid by 
            using the credentials to access the resource specified by targetName.
            The results of that validation test are passed to <see cref="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.ConfirmCredentials(System.Boolean)"/> in the
            confirm parameter.
            </remarks>
            <param name="confirm">Specifies whether the credentials returned from the prompt function are valid.
            If TRUE, the credentials are stored in the credential manager.
            If FALSE, the credentials are not stored and various pieces of memory are cleaned up.
            </param>
            <permission cref="T:System.Security.Permissions.UIPermission">Demand for <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows"/> permission.</permission>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.DeleteSavedCredentials">
            <summary>
            Deletes a credential from the user's credential set. 
            The credential set used is the one associated with the <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Target"/> value.
            </summary>
            <permission cref="T:System.Security.Permissions.UIPermission">Demand for <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows"/> permission.</permission>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.RunDialog(System.IntPtr)">
            <summary>
            When overridden in a derived class, specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>
            true if the dialog box was successfully run; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Reset">
            <summary>
            Set all properties to it's default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Banner">
            <summary>
            Gets or sets the banner.
            </summary>
            <value>The banner.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.SaveChecked">
            <summary>
            Gets or sets if the save checkbox status.
            </summary>
            <remarks>
            If Persist is false, this value will always be false
            because the save checkbox will be hidden. 
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Flags">
            <summary>
            See <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags">
            <summary>
            Specifies special behavior for this function. 
            This value can be a bitwise-OR combination of zero or more of the following values. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.Default">
            <summary>
            The default flags settings. These are the following values:
            <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.GenericCredentials"/>, <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ShowSaveCheckbox"/>, 
            <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.AlwaysShowUI"/> and <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ExpectConfirmation"/>  
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.IncorrectPassword">
            <summary>
            Notify the user of insufficient credentials by displaying the "Logon unsuccessful" balloon tip.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.DoNotPersist">
            <summary>
            Do not store credentials or display check boxes. 
            You can pass <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ShowSaveCheckbox"/> with this flag to display 
            the Save check box only, and the result is returned in the pfSave output parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.RequestAdministrator">
            <summary>
            Populate the combo box with local administrators only.
            Windows XP Home Edition:  This flag will filter out the well-known Administrator account.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ExcludesCertificates">
            <summary>
            Populate the combo box with user name/password only. 
            Do not display certificates or smart cards in the combo box.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.RequireCertificate">
            <summary>
            Populate the combo box with certificates and smart cards only. 
            Do not allow a user name to be entered.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ShowSaveCheckbox">
            <summary>
            If the check box is selected, show the Save check box and return true in the
            <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.SaveChecked"/> property, otherwise, return false. 
            <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.DoNotPersist"/> must be specified to use this flag. 
            Check box uses the value in <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.SaveChecked"/> by default.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.AlwaysShowUI">
            <summary>
            Specifies that a user interface will be shown even if the credentials can be 
            returned from an existing credential in credential manager. 
            This flag is permitted only if CredentialsDialog.GenericCredentials is also specified.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.RequireSmartCard">
            <summary>
            Populate the combo box with certificates or smart cards only. 
            Do not allow a user name to be entered.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.PasswordOnlyOk">
            <summary/> 
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ValidateUsername">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.CompleteUserName">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.Persist">
            <summary>
            Do not show the Save check box, but the credential is saved as though the box 
            were shown and selected.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ServerCredential">
            <summary>
            This flag is meaningful only in locating a matching credential to prefill the dialog box, 
            should authentication fail. When this flag is specified, wildcard credentials will not be matched. 
            It has no effect when writing a credential. CredUI does not create credentials that contain 
            wildcard characters. Any found were either created explicitly by the user or created 
            programmatically, as happens when a RAS connection is made.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.ExpectConfirmation">
            <summary>
            Specifies that the caller will call CredentialsDialog.ShowDialog after checking to determine whether 
            the returned credentials are actually valid. This mechanism ensures that invalid credentials are 
            not saved to the credential manager. 
            Specify this flag in all cases unless <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.DoNotPersist"/> is specified.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.GenericCredentials">
            <summary>
            Consider the credentials entered by the user to be generic credentials.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.UsernameTargetCredentials">
            <summary>
            The credential is a "runas" credential. The <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialog.Target"/> parameter specifies the name of the 
            command or program being run. It is used for prompting purposes only.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.CredentialsDialogFlags.KeepUsername">
            <summary>
            Sets if the CredentialsDialog.Credentials.User displayed as the user name is read-only.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DSObjectPicker">
            <summary>
            The object picker dialog box.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.IDsObjectPicker">
            <summary>
            The IDsObjectPicker interface is used by an application to initialize and display 
            an object picker dialog box. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.IDsObjectPicker.Initialize(Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo@)">
            <summary>
            Initializes the specified p init info.
            </summary>
            <param name="pInitInfo">The p init info.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.IDsObjectPicker.InvokeDialog(System.IntPtr,System.Runtime.InteropServices.ComTypes.IDataObject@)">
            <summary>
            Invokes the dialog.
            </summary>
            <param name="hwnd">The hwnd.</param>
            <param name="lpDataObject">The lp data object.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog">
            <summary>
            Directory services object picker dialog.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DsObjectPickerDialog"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:DsObjectPickerDialog"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.RunDialog(System.IntPtr)">
            <summary>
            When overridden in a derived class, specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>
            true if the dialog box was successfully run; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.Reset">
            <summary>
            When overridden in a derived class, resets the properties of a common dialog box to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.SelectedObjects">
            <summary>
            Gets or sets the selected objects.
            </summary>
            <value>The selected objects.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.ScopeTypes">
            <summary>
            Gets or sets the scope types.
            </summary>
            <value>The scope types.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.InitialSettings">
            <summary>
            Gets or sets the initial settings.
            </summary>
            <value>The initial settings.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.InitialScopes">
            <summary>
            Gets or sets the initial scopes.
            </summary>
            <value>The initial scopes.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.UplevelFlags">
            <summary>
            Gets or sets the uplevel flags.
            </summary>
            <value>The uplevel flags.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDialog.DownlevelFlags">
            <summary>
            Gets or sets the downlevel flags.
            </summary>
            <value>The downlevel flags.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes">
            <summary>
            Flags that indicate the scope types for the object to pick. 
            You can combine multiple scope types if all specified scopes use the same settings. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.TargetComputer">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.UplevelJoinedDomain">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.DownlevelJoinedDomain">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.EnterpriseDomain">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.GlobalCatalog">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.ExternalUplevelDomain">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.ExternalDownlevelDomain">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.Workgroup">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.UserEnteredUplevelScope">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerScopeTypes.UserEnteredDownlevelScope">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialSettings">
            <summary>
            Flags that determine the object picker options.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialSettings.Multiselect">
            <summary>
            Allow user to select multiple objects.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialSettings.SkipTargetComputerDCCheck">
            <summary>
            Specify that this is not a domain controller.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes">
            <summary>
            Flags that indicate the format used to return ADsPath for objects selected from this scope. 
            The flScope member can also indicate the initial scope displayed in the Look in drop-down list. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.StartingScope">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.WantProviderWinNT">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.WantProviderLDAP">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.WantProviderGC">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.WantSidPath">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.WantDownlevelBuiltinPath">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.DefaultFilterUsers">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.DefaultFilterGroups">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.DefaultFilterComputers">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerInitialScopes.DefaultFilterContacts">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags">
            <summary>
            Filter flags to use for an up-level scope, 
            regardless of whether it is a mixed or native mode domain. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.IncludeAdvancedView">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.Users">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.BuiltinGroups">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.WellknownPrincipals">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.UniversalGroupsDL">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.UniversalGroupsSE">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.GlobalGroupsDL">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.GlobalGroupsSE">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.DomainLocalGroupsDL">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.DomainLocalGroupsSE">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.Contacts">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerUplevelFlags.Computers">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags">
            <summary>
            Contains the filter flags to use for down-level scopes
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Users">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.LocalGroups">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.GlobalGroups">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Computers">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.World">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.AuthenticatedUser">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Anonymous">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Batch">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.CreatorOwner">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.CreatorGroup">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.FilterDialup">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Interactive">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Network">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.Service">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.System">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.ExcludeBuiltinGroups">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.TerminalServer">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.AllWellknownSids">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.LocalService">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.NetworkService">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerDownlevelFlags.RemoteLogon">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerItem">
            <summary>
            Summary description for ADObject.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerItem.ClassName">
            <summary>
            Gets or sets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerItem.Upn">
            <summary>
            Gets or sets the UPN.
            </summary>
            <value>The UPN.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.DsObjectPickerItem.Sid">
            <summary>
            See <see cref="T:System.Security.Principal.SecurityIdentifier.Value"></see>.
            </summary>
            <value>The sid.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential">
            <summary>
            Summary description for SecureCredential.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.#ctor(System.String,System.Char[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.#ctor(System.String,System.Text.StringBuilder)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.PasswordToString">
            <summary>
            This method is for backward compatibility with APIs that does
            not provide the SecureString type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.User">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.Domain">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.SecureCredential.PrincipalName">
            <summary>
            The principal name (domain\user);
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods">
            <summary>
            Class for handling platform invoke declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_MESSAGE_LENGTH">
            <summary>
            Maximum number of characters for the pszMessageText member of a CREDUI_INFO structure.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_CAPTION_LENGTH">
            <summary>
            Maximum number of characters for the pszCaptionText member of a CREDUI_INFO structure.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_GENERIC_TARGET_LENGTH">
            <summary>
            Maximum number of characters in a string that specifies a target name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_DOMAIN_TARGET_LENGTH">
            <summary>
            Maximum number of characters in a string that specifies a domain name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_USERNAME_LENGTH">
            <summary>
            Maximum number of characters in a string that specifies a user account name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_MAX_PASSWORD_LENGTH">
            <summary>
            Maximum number of characters in a string that specifies a password.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_BANNER_HEIGHT">
            <summary>
            Valid bitmap height (in pixels) of a user-defined banner.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.CREDUI_BANNER_WIDTH">
            <summary>
            Valid bitmap width (in pixels) of a user-defined banner.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.GlobalLock(System.IntPtr)">
            <summary>
            The GlobalLock function locks a global memory object and returns a pointer to 
            the first byte of the object's memory block.
            GlobalLock function increments the lock count by one.
            Needed for the clipboard functions when getting the data from IDataObject
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.GlobalUnlock(System.IntPtr)">
            <summary>
            The GlobalUnlock function decrements the lock count associated with a memory object.
            </summary>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo">
            <summary>
            The DSOP_INIT_INFO structure contains data required to initialize an object picker dialog box. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.cbSize">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.pwzTargetComputer">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.cDsScopeInfos">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.aDsScopeInfos">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.flOptions">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.cAttributesToFetch">
            <summary/>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopInitInfo.apwzAttributeNames">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopScopeInitInfo">
            <summary>
            The DsopScopeInitInfo structure describes one or more scope types that 
            have the same attributes. A scope type is a type of location, for example 
            a domain, computer, or Global Catalog, from which the user can select objects.
            A scope type is a type of location, for example a domain, computer, or 
            Global Catalog, from which the user can select objects. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopUplevelFilterFlags">
            <summary>
            The DsopUplevelFilterFlags structure contains flags that indicate the 
            filters to use for an up-level scope. An up-level scope is a scope that 
            supports the ADSI LDAP provider.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsopFilterFlags">
            <summary>
            The DsopFilterFlags structure contains flags that indicate the types of 
            objects presented to the user for a specified scope or scopes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsSelection">
            <summary>
            The DsSelection structure contains data about an object the user selected 
            from an object picker dialog box. 
            The DsSelectionList structure contains an array of DS_SELECTION structures.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.UnsafeNativeMethods.DsSelectionList">
            <summary>
            The DsSelectionList structure contains data about the objects the user 
            selected from an object picker dialog box.
            This structure is supplied by the IDataObject interface supplied by the 
            IDsObjectPicker::InvokeDialog method in the CFSTR_DSOP_DS_SELECTION_LIST data format.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker">
            <summary>
            Helper class that displays a UI X509 Certificate selector dialog.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.#ctor">
            <summary>
            Default initializer. The default store name is StoreName.My for the client side.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Class initializer with a <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.StoreName"/> and the flag that sepcifies the endpoint side.
            </summary>
            <param name="storeName">Name of the store.</param>
            <param name="storeLocation">The store location.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.PickCertificate">
            <summary>
            Pick the selected certificate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.PickCertificate(System.IntPtr)">
            <summary>
            Pick the selected certificate
            </summary>
            <param name="hwd"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.DisplayCertificate">
            <summary>
            Display the selected certificate
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.DisplayCertificate(System.IntPtr)">
            <summary>
            Display the selected certificate over the parent window handler.
            </summary>
            <param name="hwd"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.Store">
            <summary>
            Gets the store.
            </summary>
            <value>The store.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.StoreName">
            <summary>
            Gets the name of the store.
            </summary>
            <value>The name of the store.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePicker.StoreLocation">
            <summary>
            Gets the store location.
            </summary>
            <value>The store location.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog">
            <summary>
            X.509 Certificate picker dialog.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:X509CertificatePickerDialog"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Runs a common dialog box with the specified owner.
            </summary>
            <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"></see> that represents the top-level window that will own the modal dialog box.</param>
            <returns>
            	<see cref="F:System.Windows.Forms.DialogResult.OK"></see> if the user clicks OK in the dialog box; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel"></see>.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.RunDialog(System.IntPtr)">
            <summary>
            When overridden in a derived class, specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>
            true if the dialog box was successfully run; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.Reset">
            <summary>
            When overridden in a derived class, resets the properties of a common dialog box to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.StoreName">
            <summary>
            Gets or sets the name of the store.
            </summary>
            <value>The name of the store.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.StoreLocation">
            <summary>
            Gets or sets the store location.
            </summary>
            <value>The store location.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerDialog.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>The certificate.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView">
            <summary>
            The X509 certificates picker UI.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:X509CertificatePickerView"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Initializes a new instance of the <see cref="T:X509CertificatePickerView"/> class.
            </summary>
            <param name="storeLocation">The store location.</param>
            <param name="storeName">Name of the store.</param>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.StoreName">
            <summary>
            Gets or sets the name of the store.
            </summary>
            <value>The name of the store.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.StoreLocation">
            <summary>
            Gets or sets the store location.
            </summary>
            <value>The store location.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Dialogs.X509CertificatePickerView.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>The certificate.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel">
            <summary>
            Implementation of the IProjectItemModel interface that talks to the
            visual studio DTE object model.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel">
            <summary>
            Interface that provides an abstraction to a <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel.ProjectItem"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel.ProjectItem">
            <summary>
            Returns the underlying <see cref="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel.ProjectItem"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel.Name">
            <summary>
            Returns the name of the folder
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectItemModel.ItemPath">
            <summary>
            Returns the path of the folder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel.#ctor(EnvDTE.ProjectItem)">
            <summary>
            Initializes a new instance of the <see cref="T:DteFolderModel"/> class.
            </summary>
            <param name="projectItem">The current projectitem.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel.ToString">
            <summary>
            Returns the project name
            </summary>
            <returns>Project name</returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel.ProjectItem">
            <summary>
            Returns the actual DTE project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel.Name">
            <summary>
            Returns the name of the folder
            </summary>        
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectItemModel.ItemPath">
            <summary>
            Returns the name of the folder
            </summary>        
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel">
            <summary>
            Implementation of the IProjectModel interface that talks to the
            visual studio DTE object model.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel">
            <summary>
            Interface providing various services for querying or updating
            an open Visual Studio project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.ProjectContainsFile(System.String)">
            <summary>
            Projects the contains file.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.TypeResolutionService">
            <summary>
            Returns an instance of <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/> for the project scope
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.Types">
            <summary>
            Returns a list with the types defined in the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.Folders">
            <summary>
            Returns a list of folders for the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.IsWebProject">
            <summary>
            Returns true if the project is a website project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.Project">
            <summary>
            Returns the underlying project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.Name">
            <summary>
            Returns the name of the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.AssemblyName">
            <summary>
            Returns the assembly name of the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel.ProjectPath">
            <summary>
            Returns the physical path of the project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.#ctor(EnvDTE.Project,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DteProjectModel"/> class.
            </summary>
            <param name="project">The current project.</param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.ProjectContainsFile(System.String)">
            <summary>
            Returns true if the file is in the current project.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.ToString">
            <summary>
            Returns the project name
            </summary>
            <returns>Project name</returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.Project">
            <summary>
            Returns the actual DTE project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.TypeResolutionService">
            <summary>
            Returns an instance of <see cref="T:System.ComponentModel.Design.ITypeResolutionService"/> for the project scope
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.Types">
            <summary>
            A list of types on the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.Folders">
            <summary>
            Returns a list of folders for the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.IsWebProject">
            <summary>
            Returns true if the project is a website project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.Name">
            <summary>
            Returns the name of the project
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.AssemblyName">
            <summary>
            Returns the assembly name of the project
            </summary>        
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteProjectModel.ProjectPath">
            <summary>
            Returns the physical path of the project
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel">
            <summary>
            Abstracts the DTE solution model
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ISolutionModel">
            <summary>
            Interface providing various services for querying or updating
            an open Visual Studio Solution.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ISolutionModel.FindProjectsWithResponsibility(System.String)">
            <summary>
            Finds across the projects in the solution for projects with a given responsibility.       
            </summary>
            <param name="responsibility">Project responsibility</param>
            <returns>List of <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel"/></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ISolutionModel.FindProjectsWithResponsibility(System.String[])">
            <summary>
            Finds across the projects in the solution for projects with a given set of responsibilities.       
            </summary>
            <param name="responsibilities">Project responsibilities</param>
            <returns>List of <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel"/></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ISolutionModel.Solution">
            <summary>
            Gets the current solution.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ISolutionModel.LongestItemPath">
            <summary>
            Searches the longest path for a project item in the solution,
            relative to the path of the solution itself
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel.#ctor(EnvDTE.Solution,System.IServiceProvider)">
            <summary>
            Creates an instance based on the DTE Solution and an <see cref="T:System.IServiceProvider"/>
            </summary>
            <param name="solution"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel.FindProjectsWithResponsibility(System.String)">
            <summary>
            Finds across the projects in the solution for projects with a given responsibility.       
            </summary>
            <param name="responsibility">Project responsibility</param>
            <returns>List of <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel"/></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel.FindProjectsWithResponsibility(System.String[])">
            <summary>
            Finds across the projects in the solution for projects with a given set of responsibilities.       
            </summary>
            <param name="responsibilities">Project responsibilities</param>
            <returns>List of <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.IProjectModel"/></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel.Solution">
            <summary>
            Returns the actual DTE solution
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteSolutionModel.LongestItemPath">
            <summary>
            Returns the lenght of the longest item path in the solution
            </summary>
            <remarks>Useful to detect paths longer than 260 chars</remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel">
            <summary>
            ITypeModel implementation for DTE.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel">
            <summary>
            Provides an abstraction for types in a project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.HasAttribute(System.String)">
            <summary>
            Verifies if the type is decorated with the specified custom attribute
            </summary>
            <param name="attributeFullName">The fully qualified name of the attribute</param>
            <returns>True if the attribute is found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.HasAttribute(System.String,System.Boolean)">
            <summary>
            Verifies if the type is decorated with the specified custom attribute
            </summary>
            <param name="attributeFullName">The fully qualified name of the attribute</param>
            <param name="inherited">Allows to search the attribute in inherited types</param>
            <returns>True if the attribute is found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.HasAttributePropertyValue(System.String,System.String,System.Object)">
            <summary>
            Determines whether the specified attribute has a property with the specified value.
            </summary>
            <param name="attributeFullName">Full name of the attribute.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns>
            	<c>true</c> if the attribute property has the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.HasMember(System.String)">
            <summary>
            Verifies if the type contains any member with the specified name
            </summary>
            <param name="memberName">The name of the member</param>
            <returns>True if contains at least one member with the specified name, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.FullName">
            <summary>
            Gets the fully qualified type name (namespace + type name)
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.Name">
            <summary>
            Gets the name of the type (without namespace)
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.IsClass">
            <summary>
            Returns true if the type is a class
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.IsInterface">
            <summary>
            Returns true if the type is an interface
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.IsPublic">
            <summary>
            Returns true if the type is public
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.ITypeModel.TypeModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DteTypeModel"/> class.
            </summary>
            <remarks>
            Constructor used for testing purposes.
            </remarks>
            <param name="typeModel">The type model.</param>        
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.#ctor(EnvDTE.CodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:DteTypeModel"/> class.
            </summary>
            <param name="codeType">Type of the code.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.HasAttribute(System.String)">
            <summary>
            Verifies if the type is decorated with the specified custom attribute
            </summary>
            <param name="attributeFullName">The fully qualified name of the attribute</param>
            <returns>
            True if the attribute is found, false otherwise
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.HasAttribute(System.String,System.Boolean)">
            <summary>
            Verifies if the type is decorated with the specified custom attribute
            </summary>
            <param name="attributeFullName">The fully qualified name of the attribute</param>
            <param name="inherited">Allows to search the attribute in inherited types</param>
            <returns>True if the attribute is found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.HasAttributePropertyValue(System.String,System.String,System.Object)">
            <summary>
            Determines whether the specified attribute has a property with the specified value.
            </summary>
            <param name="attributeFullName">Full name of the attribute.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <returns>
            	<c>true</c> if the attribute property has the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.HasMember(System.String)">
            <summary>
            Verifies if the type contains any member with the specified name
            </summary>
            <param name="memberName">The name of the member</param>
            <returns>
            True if contains at least one member with the specified name, false otherwise
            </returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.FullName">
            <summary>
            Gets the fully qualified type name (namespace + type name)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.Name">
            <summary>
            Gets the name of the type (without namespace)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.IsPublic">
            <summary>
            Returns true if the type is public
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.IsClass">
            <summary>
            Returns true if the type is a class
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.IsInterface">
            <summary>
            Returns true if the type is an interface
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.ContainingProject">
            <summary>
            Gets the containing project.
            </summary>
            <value>The containing project.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.DteWrapper.DteTypeModel.TypeModel">
            <summary>
            Gets the type model.
            </summary>
            <value>The type model.</value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.AddWebReferenceEditor">
            <summary>
            Editor that shows the Vs Add Web Reference dialog
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.AddWebReferenceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.AddWebReferenceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditor">
            <summary>
            Represents the editor for class names.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditor.ShouldInclude(System.Type)">
            <summary>
            Shoulds the include.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm">
            <summary>
            Allows browsing for a class name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},System.Collections.Generic.List{System.Type})">
            <summary>
            Provides a UI for the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditor"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.OnLoadNodes">
            <summary>
            Provide a hook for derived classes to modify the initial 
            list of types.
            </summary>
            
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.TypeFullName">
            <summary>
            Exposes the full type name of the element selected.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.SelectedType">
            <summary>
            Exposes the currently selected type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Editors.ClassBrowser.ClassBrowserEditorForm.Browser">
            <summary>
            Exposes the <see cref="T:System.Windows.Forms.TreeView"/> used to show types.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConfigurationFileChooser">
            <summary>
            Editor that will choose a file when it is used
            It has properties that can be overrided 
            to use different filter, title and initialdirectory
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConfigurationFileChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConfigurationFileChooser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConfigurationFileChooser.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConfigurationFileChooser.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConnectionStringEditor">
            <summary>
            Editor for connection strings
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConnectionStringEditor.ProviderArgument">
            <summary>
            Configuration attribute that can be specified at the editor element 
            that determines the argument that holds the data provider used 
            in the connection string. This argument is optional and if specified it 
            must have the name "ProviderArgument" and point to an argument defined in 
            the containing recipe.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConnectionStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConnectionStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.ConnectionStringEditor.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser">
            <summary>
            Editor that will choose a file when it is used
            It has properties that can be overrided 
            to use different filter, title and initialdirectory
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileChooser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="openFileDialog">The open file dialog.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FileChooser.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser">
            <summary>
            Editor for selecting a folder.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.InitialDirectoryAttributeName">
            <summary>
            The root folder where the browsing starts from.
            Should be a value from <see cref="T:System.Environment.SpecialFolder"/> enum.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.TitleAttributeName">
            <summary>
            The descriptive text displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.DefaultInitialDirectory">
            <summary>
            The default root folder where the browsing starts from.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FolderChooser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FolderChooser"/> class.
            </summary>
            <param name="description">The descriptive text displayed above the tree view control in the dialog box.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.#ctor(System.String,System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:FolderChooser"/> class.
            </summary>
            <param name="description">The descriptive text displayed above the tree view control in the dialog box.</param>
            <param name="rootFolder">The root folder where the browsing starts from.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.FolderChooser.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.WindowsUserNamePickerEditor">
            <summary>
            Picks a Windows user account.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.WindowsUserNamePickerEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.WindowsUserNamePickerEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor">
            <summary>
            The X509 certificate editor class.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.StoreNameArgumentName">
            <summary>
            The <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"/> argument name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.StoreLocationArgumentName">
            <summary>
            The <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"/> argument name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.FindTypeArgumentName">
            <summary>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType"/> argument name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Editors.X509CertificateEditor.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.EventArgs`1">
            <summary>
            Generic EventArgs
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.EventArgs`1.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.EventArgs`1.#ctor(`0)">
            <summary>
            ctor with default data
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.EventArgs`1.Data">
            <summary>
            Returns the data
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ISolutionExtender">
            <summary>
            Interface implemented by extensions to the solution object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ISolutionExtender.Initialize(EnvDTE.Solution,EnvDTE.IExtenderSite,System.Int32)">
            <summary>
            Initializes the extender with the solution.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ExtenderUtility">
            <summary>
            Helper class for handling reflection stuff for extenders.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ExtenderUtility.ComRegister(System.Type,System.String,System.String)">
            <summary>
            Registers the provider.
            </summary>
            <param name="type">The type.</param>
            <param name="extenderCategoryGuid">The extender category GUID.</param>
            <param name="extenderName">Name of the extender.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ExtenderUtility.ComUnRegister(System.Type,System.String,System.String)">
            <summary>
            Un Registers the provider.
            </summary>
            <param name="type">The type.</param>
            <param name="extenderCategoryGuid">The extender category GUID.</param>
            <param name="extenderName">Name of the extender.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Extenders.ExtenderUtility.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="reflectionElement">The reflection element.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference">
            <summary>
            UnBoundRecipeReference that allows to be executed only on a Vs Project based on property
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference">
            <summary>
            UnBoundRecipe that allows to be executed only on CSharp targets
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LanguageTypeReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Required constructor for deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.IsEnabledFor(System.Object)">
            <summary>
            Determines whether the reference is enabled for a particular target item,
            based on the condition contained in the reference.
            </summary>
            <param name="target">The <see cref="T:System.Object"/> to check for references.</param>
            <returns>
            	<see langword="true"/> if the reference is enabled for the given <paramref name="target"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.OnIsEnabledFor(System.Object)">
            <summary>
            Called when [is enabled for].
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Provides a serialization member that derived classes can override to add
            data to be stored for serialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info object is null. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" /></PermissionSet>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CSharpLanguageReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectPropertyReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.OnIsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a project that has the mapping property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Required constructor for deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Provides a serialization member that derived classes can override to add
            data to be stored for serialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info object is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.ProjectPropertyReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference">
            <summary>
            UnboundTemplateReference that allows to be executed only on a Vs Solution Folder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.#ctor(System.String)">
            <summary>
            UnboundTemplateReference that allows to be executed only on a Vs Solution Folder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.IsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a Solution Folder
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Required constructor for deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            	<seealso cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.SolutionFolderPropertyTemplateReference.AppliesTo">
            <summary>
            Returns a friendly name as Any Solution or Solution Folder
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference">
            <summary>
            UnBoundRecipeReference that allows to be executed only on a CodeElement specified in the CodeElementTypeName property
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeElementReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.IsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is the CodeElement specified in the CodeElementTypeName property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeElementReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Provides a serialization member that derived classes can override to add
            data to be stored for serialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.CodeElementReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.AnyProjectReference">
            <summary>
            UnBoundRecipeReference that allows to be executed on any language Vs Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.AnyProjectReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AnyProjectReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.AnyProjectReference.IsEnabledFor(System.Object)">
            <summary>
            Determines whether the reference is enabled for a particular target item,
            based on the condition contained in the reference.
            </summary>
            <param name="target">The <see cref="T:System.Object"/> to check for references.</param>
            <returns>
            	<see langword="true"/> if the reference is enabled for the given <paramref name="target"/>.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.AnyProjectReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.AnyProjectReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference">
            <summary>
            UnBoundRecipe that allows to be executed only on Solution Folders
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference.#ctor(System.String)">
            <summary>
            Constructor of the FolderReference that must specify the 
            recipe name that will be used by the reference
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference.IsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a solution folder
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FolderReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.FolderReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference">
            <summary>
            UnBoundRecipe that allows to be executed only on ProjectItem
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.fileExtension">
            <summary>
            The file extension configuration argument.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.#ctor(System.String)">
            <summary>
            Constructor of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference"/> that must specify the 
            recipe name that will be used by the reference
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.OnIsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a <see cref="T:EnvDTE.ProjectItem"/> file.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectItemReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Provides a serialization member that derived classes can override to add
            data to be stored for serialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectItemReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectReference">
            <summary>
            UnBoundRecipeReference that allows to be executed only on a Vs Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectReference.OnIsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a project.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjectReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.ProjectReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.SolutionReference">
            <summary>
            UnBoundRecipeReference that allows to be executed only on a Vs Solution
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.SolutionReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolutionReference"/> class.
            </summary>
            <param name="recipe">The recipe.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.SolutionReference.IsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a Solution.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.SolutionReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SolutionReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.SolutionReference.AppliesTo">
            <summary>
            See <see cref="P:Microsoft.Practices.RecipeFramework.IAssetReference.AppliesTo"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.AnyProjectReference">
            <summary>
              Looks up a localized string similar to Any Project of any language .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ChooseCertificateDielogMessage">
            <summary>
              Looks up a localized string similar to Choose a Certificate used for signing/encryption.\nThe Current store is : {0} - {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.CodeElementReference">
            <summary>
              Looks up a localized string similar to A CodeElement.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.CompilationFailed">
            <summary>
              Looks up a localized string similar to {0} project(s) failed to compile..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ConfigurationFileChooserTitle">
            <summary>
              Looks up a localized string similar to Choose application configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.CreateNewFolderMessage">
             <summary>
               Looks up a localized string similar to The folder &apos;{0}&apos; does not exists. 
            Do you want to create the new folder?.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.CreateSolutionDirectory_NoDots">
            <summary>
              Looks up a localized string similar to Invalid directory name {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.CredUIReturn">
            <summary>
              Looks up a localized string similar to Invalid operation: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DefaultFileChooserTitle">
            <summary>
              Looks up a localized string similar to Please select a file.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DefaultFilterExpression">
            <summary>
              Looks up a localized string similar to All Files (*.*) |*.*.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DefaultFolderChooserTitle">
            <summary>
              Looks up a localized string similar to Please select a folder.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DteHelper_NoSelection">
            <summary>
              Looks up a localized string similar to No selection available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DteHelper_NoSolutionExplorer">
            <summary>
              Looks up a localized string similar to Solution Explorer not active.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DteHelper_PathNotRelativeToSln">
            <summary>
              Looks up a localized string similar to Path not relative to the solution path.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.DteHelper_UnsupportedProjectKind">
            <summary>
              Looks up a localized string similar to Un supported project kind.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ExecutingAction">
            <summary>
              Looks up a localized string similar to Executing action {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.FailSafeCoordinatorExceptionMessage">
             <summary>
               Looks up a localized string similar to The recipe &apos;{0}&apos; ({1}) throw an exception while executing the action &apos;{2}&apos;.
            Error description: {3}..
             </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.FolderDoesNotExist">
            <summary>
              Looks up a localized string similar to Folder {0} does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to The Credential Management API requires Windows XP / Windows Server 2003 or later..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.HierarchyArgumentException">
            <summary>
              Looks up a localized string similar to Hierarchy is not a project..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.HierarchyIsNotProjectException">
            <summary>
              Looks up a localized string similar to Hierarchy is not a project..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.HierarchyNotSitedException">
            <summary>
              Looks up a localized string similar to Hierarchy is not sited..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InnerExceptionMessage">
            <summary>
              Looks up a localized string similar to {0}{1}{2}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InsertionPointException">
            <summary>
              Looks up a localized string similar to Cannot find insertion point {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidCaptionLength">
            <summary>
              Looks up a localized string similar to The caption has a maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidConditionException">
            <summary>
              Looks up a localized string similar to Invalid Condition {0}/n{1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidIdentifiedArgumentException">
            <summary>
              Looks up a localized string similar to Invalid Identifier..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidImageHeight">
            <summary>
              Looks up a localized string similar to The banner image height must be {0} pixels..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidImageWidth">
            <summary>
              Looks up a localized string similar to The banner image width must be {0} pixels..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidMessageLength">
            <summary>
              Looks up a localized string similar to The message has a maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidPasswordLength">
            <summary>
              Looks up a localized string similar to The password has a maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidPrincipalLength">
            <summary>
              Looks up a localized string similar to The principal name has a maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.InvalidTargetLength">
            <summary>
              Looks up a localized string similar to The target has a maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.LanguageNotSupported">
            <summary>
              Looks up a localized string similar to Language {0} not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.NodeName0">
            <summary>
              Looks up a localized string similar to Node0.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.NodeName1">
            <summary>
              Looks up a localized string similar to Node1.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.NodeName2">
            <summary>
              Looks up a localized string similar to Node2.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.OverwriteFilesInFolder">
             <summary>
               Looks up a localized string similar to The folder &apos;{0}&apos; already contains files. These files may be overwritten by this process. 
            Do you want to proceed and overwrite this files?.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.OverwriteItemMessage">
             <summary>
               Looks up a localized string similar to An item with the name &apos;{0}&apos; already exists on disk in the specified project. 
            Do you want to overwrite it?.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ProjectIsNotVSProject">
            <summary>
              Looks up a localized string similar to Project is not a VS project..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ProjectItemReference">
            <summary>
              Looks up a localized string similar to Any Project Item.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.ProjectReference">
            <summary>
              Looks up a localized string similar to Any CSharp Project.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.SolutionFolderReference">
            <summary>
              Looks up a localized string similar to Any Solution Folder.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.SolutionOrSolutionFolderReference">
            <summary>
              Looks up a localized string similar to Solution or Solution Folder.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.SolutionReference">
            <summary>
              Looks up a localized string similar to A Solution.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.StatusBarProgressMessage">
            <summary>
              Looks up a localized string similar to Processing Actions... .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.StatusBarReadyMessage">
            <summary>
              Looks up a localized string similar to Ready.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.TypeNameValidatorExpectsString">
            <summary>
              Looks up a localized string similar to A string was expected.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.TypeNameValidatorTypeNotFound">
            <summary>
              Looks up a localized string similar to The type named &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Properties.Resources.TypeNameValidatorValueNotOptional">
            <summary>
              Looks up a localized string similar to The value is not optional.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.WebProjectItemReference">
            <summary>
            UnBoundRecipe that allows to be executed only on a WebProjectItem
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.WebProjectItemReference.#ctor(System.String)">
            <summary>
            Constructor of the <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.WebProjectItemReference"/> that must specify the 
            recipe name that will be used by the reference
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.WebProjectItemReference.OnIsEnabledFor(System.Object)">
            <summary>
            Performs the validation of the item passed as target
            Returns true if the reference is allowed to be executed in the target
            that is if the target is a <see cref="T:VsWebSite.VSWebProjectItem"/> file.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.References.VisualStudio.WebProjectItemReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebProjectItemReference"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the reference.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener">
            <summary>
            Logs events to the output window.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.#ctor(Microsoft.Practices.RecipeFramework.Services.IOutputWindowService,System.Diagnostics.TraceSwitch)">
            <summary>
            Initializes a new instance of the <see cref="T:OutputWindowTraceListener"/> class.
            </summary>
            <param name="outputWindow">The output window.</param>
            <param name="traceSwitch">The trace switch.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Traces the data.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The id.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Traces the data.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The id.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Traces the event.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Traces the event.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The id.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService">
            <summary>
            Service that manages logging to the output window.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OutputWindowService"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.#ctor(System.String,System.Diagnostics.TraceSwitch)">
            <summary>
            Initializes a new instance of the <see cref="T:OutputWindowService"/> class.
            </summary>
            <param name="outputWindowName">Name of the output window.</param>
            <param name="traceSwitch">The trace switch.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.OnSited">
            <summary>
            When implemented by a class, allows descendants to
            perform processing whenever the component is being sited.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.Display(System.String)">
            <summary>
            Displays the <paramref name="message"/> in the output window
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Services.OutputWindowService.WindowName">
            <summary>
            Gets the output window name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType">
            <summary>
            Objects of this class represent a CLR Type
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType.Init(System.String)">
            <summary>
            Public initializer method, called from TypeConverters
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType.ToString">
            <summary>
            Override to display the type full name in the UI and properties window
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1">
            <summary>
            TypeConverter used to convert from string and CLRType and viceversa
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tells the designer that we know how to convert from CLRType
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Tells the designer that we know how to convert from CLRType
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tells the designer that we know how to convert to CLRType
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from string to CLRType
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Tells the desinger if the current value is valid
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Tells the designer that we support CreateInstance
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a new instance of <seealso cref="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType"/>
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeConverter">
            <summary>
            Default TypeConverter for <seealso cref="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor`2">
            <summary>
            TypeEditor used to select Types and create CLRType objects
            </summary>
            <typeparam name="ConfigType"></typeparam>
            <typeparam name="TCLRType"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor`2.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Displays the selection dialog box and returns a <seealso cref="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRType"/> object
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor`2.Config">
            <summary>
            Returns the current configurtation object
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor`1">
            <summary>
            CLRTypeEditor configured with default configuration
            </summary>
            <typeparam name="TCLRType"></typeparam>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditorWithFilter`2">
            <summary>
            CLRTypeEditor configured with default configuration and custom filter
            </summary>
            <typeparam name="TCLRType"></typeparam>
            <typeparam name="TFilter"></typeparam>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.CLRTypeEditor">
            <summary>
            CLRTypeEditor configured with default configuration and the CLRType
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig`1">
            <summary>
            Default configuration for CLRTypeEditor
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig">
            <summary>
            Interface for configuration objects of an CLRTypeEditor/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseRoot">
            <summary>
            Root where to start browsing
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseKind">
            <summary>
            Kind of elements to show in the editor
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.Filter">
            <summary>
            Filter Type for the editor
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig`1.BrowseRoot">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseRoot"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig`1.BrowseKind">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseKind"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig`1.Filter">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.Filter"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig">
            <summary>
            Default configuration for CLRTypeEditor
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig.BrowseRoot">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseRoot"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig.BrowseKind">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.BrowseKind"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.DefaultCLRTypeEditorConfig.Filter">
            <summary>
            <seealso cref="P:Microsoft.Practices.RecipeFramework.Extensions.TypeEditor.ICLRTypeEditorConfig.Filter"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator">
            <summary>
            Provides validation for type names
            </summary>
            <remarks>
            Uses the <code>ITypeResolutionService</code> to verify the existence of the type
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.CanValidate(System.Type)">
            <summary>
            Determines whether an object can be validated based on type.
            </summary>
            <param name="type">The object type.</param>
            <returns>
            true if the type parameter value matches the expected type; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Validate(System.Object)">
            <summary>
            Determines whether the value of an object is valid.
            </summary>
            <param name="value">The object value.</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.MultipleTypes">
            <summary>
            Gets or sets a value indicating whether [multiple types].
            </summary>
            <value><c>true</c> if [multiple types]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Optional">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TypeNameValidator"/> is optional.
            </summary>
            <value><c>true</c> if optional; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Disposed">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidator.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidatorAttribute">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeNameValidatorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidatorAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase"></see>.</returns>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidatorAttribute.MultipleTypes">
            <summary>
            Especifies if the value can contain more than one type separated with ","
            </summary>
        </member>
        <member name="P:Microsoft.Practices.RecipeFramework.Extensions.Validators.TypeNameValidatorAttribute.Optional">
            <summary>
            Especifies if the value is optional
            </summary>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.CreateInstanceProvider">
            <summary>
            Returns an instance of the Argument Type
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.CreateInstanceProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.IsNotNullProvider">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.IsNotNullProvider.ArgumentAttribute">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.IsNotNullProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.General.IsNotNullProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.LocalMachineEntryProvider">
            <summary>
            LocalMachineEntryProvider class
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.LocalMachineEntryProvider.RegistryPathAttribute">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.LocalMachineEntryProvider.RegistryEntryAttribute">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.LocalMachineEntryProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.LocalMachineEntryProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.PathCreatorProvider">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.PathCreatorProvider.PathArgumentAttribute">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.PathCreatorProvider.FileAttribute">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.PathCreatorProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.OS.PathCreatorProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CodeElementUnderCursorProvider">
            <summary>
            Returns the CodeElement that applies depending on the cursor position over the Text Editor window
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CodeElementUnderCursorProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CodeLanguageProvider">
            <summary>
            Value provider that returns the CodeDomProvider for the selected project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CodeLanguageProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Use the DTE.SelectedItems collection to get the current selected project
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CodeLanguageProvider.SetValue(System.Object,System.Object@)">
            <summary>
            Sets the value.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ContainingProjectProvider">
            <summary>
            Returns the containing project of the selected item
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ContainingProjectProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Use the DTE.SelectedItems collection to get the containing project of the selected item
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeginRecipe(System.Object,System.Object@)"/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentItemProvider">
            <summary>
            ValueProvider that returns the Active Document selected
            in the selected Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentItemProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Sets the newValue to the selected Document
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentProjectProvider">
            <summary>
            Returns the current selected project in the solution explorer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentProjectProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Use the DTE.SelectedItems collection to get the current selected project
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
            
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentProjectProvider.OnBeforeActions(System.Object,System.Object@)">
            <summary>
            Contains code that will be called before actions are executed.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overridden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.CurrentProjectProvider.SetValue(System.Object,System.Object@)">
            <summary>
            Sets the value.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.FirstSelectedProjectProvider">
            <summary>
            ValueProvider that returns the first selected project
            in the solution explorer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.FirstSelectedProjectProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Sets the newValue to the first selected project
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ItemNameProvider">
            <summary>
            Provides the name of an item been unfolded
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ItemNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>Provides the name of an item been unfolded</summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeginRecipe(System.Object,System.Object@)"/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByNameProvider">
            <summary>
            Search for the project specified by the "Path" attributte in the XML configuration file
            </summary>
            <example>&lt;ValueProvider Type="ProjectByNameProvider" Path="BusinessLayer\SubProject1"/></example>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Uses <see cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/> to search for the project specified by the "Path" attributte
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeginRecipe(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByNameProvider.OnBeforeActions(System.Object,System.Object@)">
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByNameProvider.OnBeginRecipe(System.Object,System.Object@)"/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathExpressionProvider">
            <summary>
            Search for the project specified by the "Path" attributte in the XML configuration file
            </summary>
            <example>&lt;ValueProvider Type="ProjectByNameProvider" PathExpression="$(BusinessLayer)\SubProject"/></example>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathExpressionProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Uses <see cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/> to search for the project specified by the "PathExpression" attributte
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/>
            
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathExpressionProvider.OnBeforeActions(System.Object,System.Object@)">
            <summary>
            Contains code that will be called before actions are executed.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overridden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathExpressionProvider.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathExpressionProvider.Microsoft#Practices#Common#IAttributesConfigurable#Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathProvider">
            <summary>
            Search for the project specified by the "Path" attributte in the XML configuration file
            </summary>
            <example>&lt;ValueProvider Type="ProjectByPathProvider" Path="BusinessLayer\SubProject1"/></example>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Uses <see cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/> to search for the project specified by the "Path" attributte
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeginRecipe(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindProjectByPath(EnvDTE.Solution,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathProvider.OnBeforeActions(System.Object,System.Object@)">
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectByPathProvider.OnBeginRecipe(System.Object,System.Object@)"/>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider">
            <summary>
            Returns a Project property value stored on the Globals section
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.ProjectAttribute">
            <summary>
            The attribute name that specify the project that host the Globals respository.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.PropertyNameAttribute">
            <summary>
            The attribute name that specify the property name that refers 
            to the value stored in the <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.ProjectAttribute"/> Globals.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.UseSolutionGlobalsDefaultValueAttribute">
            <summary>
            The default value will be takne from the solution globals store.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.DefaultPropertyValueAttribute">
            <summary>
            The default value in case the current stored value is null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.OnBeforeActions(System.Object,System.Object@)">
            <summary>
            Called when [before actions]. 
            This method will update the <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.PropertyNameAttribute"/> in the Globals repository of the 
            <see cref="F:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.ProjectAttribute"/>.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectGlobalsEntryProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectItemByFullNameProvider">
            <summary>
            Returns a project performing a search based on its fullname
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectItemByFullNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Uses <see cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindItemByName(EnvDTE.ProjectItems,System.String,System.Boolean)"/> to search for the item specified by the "Name" attributte
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeginRecipe(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Library.DteHelper.FindItemByName(EnvDTE.ProjectItems,System.String,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectItemByFullNameProvider.OnBeforeActions(System.Object,System.Object@)">
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.ValueProvider.OnBeforeActions(System.Object,System.Object@)"/>
            <seealso cref="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectItemByFullNameProvider.OnBeginRecipe(System.Object,System.Object@)"/>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectItemByFullNameProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectNameProvider">
            <summary>
            Returns a project name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.ProjectNameProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemFileCodeModelProvider">
            <summary>
            Returns the FileCodeModel for the selected ProjectItem on the Solution Explorer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemFileCodeModelProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemNameProvider">
            <summary>
            ValueProvider that returns the Active Document selected
            in the selected Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Sets the newValue to the selected Document
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemPathProvider">
            <summary>
            ValueProvider that returns the Active Document selected
            in the selected Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedItemPathProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Sets the newValue to the selected Document
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedSolutionFolderProvider">
            <summary>
            Returns the selected Solution Folder on the Solution Explorer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SelectedSolutionFolderProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SolutionNameProvider">
            <summary>
            ValueProvider that returns the Solution Name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SolutionNameProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Sets the newValue to the Solution Name
            </summary>
            <param name="currentValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SolutionPathProvider">
            <summary>
            Returns the Solution Path
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SolutionPathProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.SolutionPathProvider.GetSolutionPath(System.Object@)">
            <summary>
            Gets the solution path.
            </summary>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.WebApplicationURLProvider">
            <summary>
            Returns the URL for particular resource on a Web Project
            </summary>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.WebApplicationURLProvider.OnBeginRecipe(System.Object,System.Object@)">
            <summary>
            Contains code that will be called when recipe execution begins. This is the first method in the lifecycle.
            </summary>
            <param name="currentValue">An <see cref="T:System.Object"/> that contains the current value of the argument.</param>
            <param name="newValue">When this method returns, contains an <see cref="T:System.Object"/> that contains
            the new value of the argument, if the returned value
            of the method is <see langword="true"/>. Otherwise, it is ignored.</param>
            <returns>
            	<see langword="true"/> if the argument value should be replaced with
            the value in <paramref name="newValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>By default, always returns <see langword="false"/>, unless overriden by a derived class.</remarks>
        </member>
        <member name="M:Microsoft.Practices.RecipeFramework.Extensions.ValueProviders.VisualStudio.WebApplicationURLProvider.Configure(System.Collections.Specialized.StringDictionary)">
            <summary>
            Configures the component using the dictionary of attributes specified
            in the configuration file.
            </summary>
            <param name="attributes">The attributes in the configuration element.</param>
        </member>
    </members>
</doc>
