<#@ Template Language="C#" #>
<#@ Assembly name="System.dll" #>
<#@ Import Namespace="System" #>
<#@ property processor="PropertyProcessor" name="ModuleName" #>
<#@ property processor="PropertyProcessor" name="ViewName" #>
<#@ property processor="PropertyProcessor" name="ModuleNamespace" #>
<#@ property processor="PropertyProcessor" name="ModuleTestProjectNamespace" #>
<#@ property processor="PropertyProcessor" name="ViewsFolder" #>
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports <#= this.ModuleNamespace #>.<#= this.ViewsFolder #>

<TestClass()> _
Public Class <#= this.ViewName #>PresenterFixture

    Public Sub New()

    End Sub

#Region "Additional test attributes"

    ' You can use the following additional attributes as you write your tests:

    ' Use ClassInitialize to run code before running the first test in the class
    '<ClassInitialize()> _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub

    ' Use ClassCleanup to run code after all tests in a class have run
    '<ClassCleanup()> _
    'Public Shared Sub MyClassCleanup()
    'End Sub

    ' Use TestInitialize to run code before running each test 
    '<TestInitialize()> _
    'Public Sub MyTestInitialize()
    'End Sub

    ' Use TestCleanup to run code after each test has run
    '<TestCleanup()> _
    'Public Sub MyTestCleanup()
    'End Sub

#End Region

End Class

Namespace Mocks

    Class Mock<#= this.ViewName #>View
        Implements I<#= this.ViewName #>View

    End Class

End Namespace

