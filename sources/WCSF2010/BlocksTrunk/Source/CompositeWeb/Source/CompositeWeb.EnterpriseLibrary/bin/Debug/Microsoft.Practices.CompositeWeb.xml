<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.CompositeWeb</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.Action">
            <summary>
            Defines an action that can be performed on the application and its associated authorization rule.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.Action.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.Action"/>.
            </summary>
            <param name="friendlyName">The name for the action.</param>
            <param name="ruleName">The name of the authorization rule.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.Action.FriendlyName">
            <summary>
            Gets or sets the action name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.Action.RuleName">
            <summary>
            Gets or sets the action authorization rule.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.AuthorizationRulesService">
            <summary>
            Defines a catalog of authorization rules associated with a url.
            </summary>
            <remarks>Several authorization rules can be asoociated witha single url.</remarks>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationRulesService">
            <summary>
            Defines a service to register authorization rules with a url.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationRulesService.RegisterAuthorizationRule(System.String,System.String)">
            <summary>
            Registers an authorization rule for the specified url.
            </summary>
            <param name="urlPath">The url to associate the authorization rule to.</param>
            <param name="rule">The authorization rule.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationRulesService.GetAuthorizationRules(System.String)">
            <summary>
            Looks up the authorization rules associated to the specified url.
            </summary>
            <param name="urlPath">The url to search the authorization rules for.</param>
            <returns>An array of <see cref="T:System.String"/> with the authorization rules.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.AuthorizationRulesService.RegisterAuthorizationRule(System.String,System.String)">
            <summary>
            Registers an authorization rule for the specified url.
            </summary>
            <param name="urlPath">The url path to associate the authorization rule to.</param>
            <param name="rule">The name of the authorization rule.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.AuthorizationRulesService.GetAuthorizationRules(System.String)">
            <summary>
            Finds the authorization rules associated with the specified url.
            </summary>
            <param name="urlPath">The url to search the authorization rules for.</param>
            <returns>An <see cref="T:System.String"/> array of authoriztion rules.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.AuthorizationRulesService.FixKey(System.String)">
            <summary>
            Fixes a key for use in the dictionary.
            </summary>
            <param name="key">Key to fix (URL)</param>
            <returns>The fixed (all upper-case) key.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.AuthorizationRulesService.RulesIndex">
            <summary>
            Dictionary that contains the rules, using the URL as a key.
            </summary>
            <remarks>
            This is only protected for testability in unit tests.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.ContainerAwareTypeMappingPolicy">
            <summary>
            Implementation of the <see cref="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.IContainerAwareTypeMappingPolicy"/> interface that
            finds the current composition container and reads the type mapping from it.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.IContainerAwareTypeMappingPolicy">
            <summary>
            Interface defining the policy used by the <see cref="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.ContainerAwareTypeMappingStrategy"/>
            to determine which types are mapped to what.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.BuilderStrategies.IContainerAwareTypeMappingPolicy.Map(Microsoft.Practices.ObjectBuilder.IReadableLocator,Microsoft.Practices.ObjectBuilder.DependencyResolutionLocatorKey)">
            <summary>
            Maps one type/ID pair to another, using the locator to find the
            current <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>. The container holds
            the current set of type mappings.
            </summary>
            <param name="locator">The <see cref="T:Microsoft.Practices.ObjectBuilder.IReadableLocator"/> being used in the
            current BuildUp operation.</param>
            <param name="incomingTypeIdPair"><see cref="T:Microsoft.Practices.ObjectBuilder.DependencyResolutionLocatorKey"/> that identifies
            the type of the current BuildUp operation.</param>
            <returns>The new type to return; returns the original key if no type mapping is defined.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.BuilderStrategies.ContainerAwareTypeMappingPolicy.Map(Microsoft.Practices.ObjectBuilder.IReadableLocator,Microsoft.Practices.ObjectBuilder.DependencyResolutionLocatorKey)">
            <summary>
            Maps one type/ID pair to another, using the locator to find the
            current <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>. The container holds
            the current set of type mappings.
            </summary>
            <param name="locator">The <see cref="T:Microsoft.Practices.ObjectBuilder.IReadableLocator"/> being used in the
            current BuildUp operation.</param>
            <param name="incomingTypeIdPair"><see cref="T:Microsoft.Practices.ObjectBuilder.DependencyResolutionLocatorKey"/> that identifies
            the type of the current BuildUp operation.</param>
            <returns>The new type to return; returns the original key if no type mapping is defined.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.ContainerAwareTypeMappingStrategy">
            <summary>
            A simple strategy that uses the current container to swap types as
            we work down the strategy chain.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.BuilderStrategies.ContainerAwareTypeMappingStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Build up the requested object.
            </summary>
            <param name="context">Current build context</param>
            <param name="typeToBuild">Type of object to build.</param>
            <param name="existing">Existing object (if any)</param>
            <param name="idToBuild">Id of object to build.</param>
            <returns>The constructed object.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for specified element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to get the key for.</param>
            <returns>An <see langword="object"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.CollectionType">
            <summary>
            Gets the type of <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.ElementName">
            <summary>
            Gets the name to identify this collection in the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/> indexed by the specified key in the collection.
            </summary>
            <param name="key">The key to the element.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement">
            <summary>
            Associates an authorizarion rule with a URL.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement.AbsolutePath">
            <summary>
            Gets or sets the url.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationRuleElement.RuleName">
            <summary>
            Gets or sets the authorization rule name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement">
            <summary>
            A configuration element to declare service metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.
            </summary>
            <param name="registerAs">The service contract</param>
            <param name="type">The type of the service</param>
            <param name="scope">The scope of the service (Global or Module)</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement.RegisterAs">
            <summary>
            Gets or sets the service contract.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement.Type">
            <summary>
            Gets or sets the service type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement.Scope">
            <summary>
            Gets or sets the scope of the service
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.#ctor(Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection"/>.
            </summary>
            <param name="services">The initial set of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.Add(Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/> to the collection.
            </summary>
            <param name="service">A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.Contains(System.Type)">
            <summary>
            Tests if the collection contains the configuration for the specified type.
            </summary>
            <param name="type">The type to search the configuration for.</param>
            <returns><see langword="true"/> if a configuration for the type is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.FindAll(System.Predicate{Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement})">
            <summary>
            Searches the collection for all the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/> that match the specified predicate.
            </summary>
            <param name="match">A <see cref="T:System.Predicate`1"/> that implements the match test.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the successful matches.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for specified element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to get the key for.</param>
            <returns>An <see langword="object"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.ThrowOnDuplicate">
            <summary>
            Indicates that an exception should be raised if a duplicate element is found.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.CollectionType">
            <summary>
            Gets the type of <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.ElementName">
            <summary>
            Gets the name to identify this collection in the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo">
            <summary>
            Defines the basic metadata needed to describe a service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo"/> with the given values.
            </summary>
            <param name="registerAs">The contract of the service.</param>
            <param name="type">The type of the service.</param>
            <param name="scope">The scope of the service (Global or Module)</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.#ctor(System.Type,System.Type,Microsoft.Practices.CompositeWeb.Configuration.ServiceScope)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo"/> with the given values.
            </summary>
            <param name="registerAs">The contract of the service.</param>
            <param name="type">The type of the service.</param>
            <param name="scope">The scope of the service (Global or Module)</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.RegisterAs">
            <summary>
            Gets or sets the service contract.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.Type">
            <summary>
            Gets or sets the service type
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo.Scope">
            <summary>
            Gets or sets the scope of the service
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ServiceScope">
            <summary>
            The service's scope.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.Configuration.ServiceScope.Global">
            <summary>
            The service belongs to the root composition container and is available to every module in the application.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.Configuration.ServiceScope.Module">
            <summary>
            The service is scoped to the registering module only.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationService">
            <summary>
            Defines a service to check for authorization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationService.IsAuthorized(System.String)">
            <summary>
            Determines whether the current user is authorized or not given the specified context.
            </summary>
            <param name="context">The context or rule to be authorized.</param>
            <returns><see langword="true"/> if the current user is authorized; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationService.IsAuthorized(System.String,System.String)">
            <summary>
            Determines whether the specified role is authorized or not given the specified context
            </summary>
            <param name="role">The role to check authorization for.</param>
            <param name="context">The context or rule to be authorized.</param>
            <returns><see langword="true"/> if the current user is authorized; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IPermissionsCatalog">
            <summary>
            Defines a catalog of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IPermissionsCatalog.RegisterPermissionSet(Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet)">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/> with the catalog.
            </summary>
            <param name="set">A <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IPermissionsCatalog.RegisteredPermissions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with the registered modules.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IRolesCatalog">
            <summary>
            Defines a catalog of roles.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IRolesCatalog.LoadRoles(System.String[])">
            <summary>
            Loads the specified roles into the catalog.
            </summary>
            <param name="roles">A <see cref="T:System.String"/> array with the roles to load.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IRolesCatalog.Roles">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of the roles in the catalog.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet">
            <summary>
            Defines a set of actions available in a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Practices.CompositeWeb.Authorization.Action})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/>.
            </summary>
            <param name="moduleName">The name of the module this set is for.</param>
            <param name="actions">A <see cref="T:System.Collections.Generic.List`1"/> with the actions available in the module.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet.ModuleName">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet.Actions">
            <summary>
            Gets the list of actions available in the module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.PermissionsCatalog">
            <summary>
            Implements a catalog of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.PermissionsCatalog.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.PermissionsCatalog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.PermissionsCatalog.RegisterPermissionSet(Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet)">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/> with the catalog.
            </summary>
            <param name="set">A <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.ModuleActionSet"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.PermissionsCatalog.RegisteredPermissions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with the registered modules.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.RolesCatalog">
            <summary>
            Implements a catalog of roles.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.RolesCatalog.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Authorization.RolesCatalog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.RolesCatalog.LoadRoles(System.String[])">
            <summary>
            Loads the specified roles into the catalog.
            </summary>
            <param name="roles">A <see cref="T:System.String"/> array with the roles to load.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Authorization.RolesCatalog.Roles">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of the roles in the catalog.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule">
            <summary>
            Implements a <see cref="T:System.Web.IHttpModule"/> used to handle web authorization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the HTTP module.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpApplication"/> hosting this HTTP module.</param>
            <remarks>If the httpApplication defines a Root Container, then this HTTP module will handle
            the <see cref="E:System.Web.HttpApplication.AuthorizeRequest"/> event.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule.Dispose">
            <summary>
            Disposes the module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule.Finalize">
            <summary>
            Implements the Dispose pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule.HandleAuthorization(Microsoft.Practices.CompositeWeb.CompositionContainer,Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext)">
            <summary>
            Handles the request authorization, using the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationRulesService"/> and 
            the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationService"/> services.
            </summary>
            <param name="rootContainer">The application root <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.</param>
            <param name="context">The <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/> for the processing request.</param>
            <exception cref="T:System.Web.HttpException">The user is not authorized to access the requested resource.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Authorization.WebClientAuthorizationModule.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern.
            </summary>
            <param name="disposing"><see langword="true"/> when called from Dispose().</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.BuilderStrategies.SessionStateBindingStrategy">
            <summary>
            Declares a <see cref="T:Microsoft.Practices.ObjectBuilder.BuilderStrategy"/> that manages the values to get or set from the session.
            </summary>
            <remarks>This strategy deals with the <see cref="T:Microsoft.Practices.CompositeWeb.SessionStateKeyAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.BuilderStrategies.SessionStateBindingStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Inspect  the object for <see cref="T:Microsoft.Practices.ObjectBuilder.BuilderStrategy"/> and set the object field values accordingly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1">
            <summary>
            Represents a filtered collection of objects, based on the locator used by the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1">
            <summary>
            Defines the contract for a managed collection of items of a specified type.
            </summary>
            <typeparam name="TItem">The type of the items the collection manages.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.AddNew``1">
            <summary>
            Creates and adds a new item to the collection.
            </summary>
            <typeparam name="TTypeToBuild">The type of the item to create.</typeparam>
            <returns>The instance of the created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.AddNew``1(System.String)">
            <summary>
            Created and adds a new item to the collection with the specified id.
            </summary>
            <typeparam name="TTypeToBuild">The type of the item to create.</typeparam>
            <param name="id">The id for the item.</param>
            <returns>The instance of the created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.FindByType``1">
            <summary>
            Searches the collection for item of the specified type.
            </summary>
            <typeparam name="TSearchType">The type of item to search for.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.FindByType(System.Type)">
            <summary>
            Searches the collection for item of the specified type.
            </summary>
            <param name="searchType">The type of item to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.Get(System.String)">
            <summary>
            Gets the item indexed by the specified id.
            </summary>
            <param name="id">The id of the item.</param>
            <returns>The located item.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IManagedObjectCollection`1.Item(System.String)">
            <summary>
            Gets the item indexed by the specified index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The located item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage},Microsoft.Practices.ObjectBuilder.SearchMode,Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection{`0}.IndexerCreationDelegate,System.Predicate{`0})">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage},Microsoft.Practices.ObjectBuilder.SearchMode,Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection{`0}.IndexerCreationDelegate,System.Predicate{`0},Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection{`0})">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.AddNew``1">
            <summary>
            Creates a new item and adds it to the collection, without an ID.
            </summary>
            <typeparam name="TTypeToBuild">The type of item to be built.</typeparam>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.AddNew``1(System.String)">
            <summary>
            Creates a new item and adds it to the collection, with an ID.
            </summary>
            <typeparam name="TTypeToBuild">The type of item to be built.</typeparam>
            <param name="id">The ID of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.FindByType``1">
            <summary>
            Finds all objects that are type-compatible with the given type.
            </summary>
            <typeparam name="TSearchType">The type of item to find.</typeparam>
            <returns>A collection of the found items.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.FindByType(System.Type)">
            <summary>
            Finds all objects that are type-compatible with the given type.
            </summary>
            <param name="searchType">The type of item to find.</param>
            <returns>A collection of the found items.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Get(System.String)">
            <summary>
            Gets the object with the given ID.
            </summary>
            <param name="id">The ID to get.</param>
            <returns>The object, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator which returns all the objects in the container, along with their
            names.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection, without an ID.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Add(`0,System.String)">
            <summary>
            Adds an item to the collection, with an ID.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="id">The ID of the item.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.AddNew(System.Type)">
            <summary>
            Creates a new item and adds it to the collection, without an ID.
            </summary>
            <param name="typeToBuild">The type of item to be built.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.AddNew(System.Type,System.String)">
            <summary>
            Creates a new item and adds it to the collection, with an ID.
            </summary>
            <param name="typeToBuild">The type of item to be built.</param>
            <param name="id">The ID of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Contains(System.String)">
            <summary>
            Determines if the collection contains an object with the given ID.
            </summary>
            <param name="id">The ID of the object.</param>
            <returns>Returns true if the collection contains the object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.ContainsObject(`0)">
            <summary>
            Determines if the collection contains an object.
            </summary>
            <param name="item">The object.</param>
            <returns>Returns true if the collection contains the object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Get``1(System.String)">
            <summary>
            Gets the object with the given ID.
            </summary>
            <typeparam name="TTypeToGet">The type of the object to get.</typeparam>
            <param name="id">The ID to get.</param>
            <returns>The object, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Remove(`0)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.BuildFirstTimeItem(System.Type,System.String,System.Object)">
            <summary>
            Used to build a first time item (either an existing one or a new one). The Builder will
            end up locating it, and we add it to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.BuildRepeatedItem(System.Type,System.String,System.Object)">
            <summary>
            Used to "build" an item we've already seen once. We don't use the builder, because that
            would do double-injection. Since it's already in the lifetime container, all we need to
            do is add a second locator registration for it for the right name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Item(System.String)">
            <summary>
            Gets an item by ID.
            </summary>
            <param name="index">The ID of the item to get.</param>
            <returns>The item, if present; null otherwise. If the collection has been given an
            <see cref="T:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.IndexerCreationDelegate"/> and the item is not found, it will be created
            using the delegate.</returns>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Added">
            <summary>
            Event that's fired when an object is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.Removed">
            <summary>
            Event that's fired when an object is removed from the collection, or disposed when the
            collection is cleaning up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Collections.ManagedObjectCollection`1.IndexerCreationDelegate">
            <summary>
            The delegate used for auto-creation of an item when not present, but indexed.
            </summary>
            <param name="t">The type being asked for.</param>
            <param name="id">The ID being asked for.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection">
            <summary>
            Collection of services that are contained in a <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection">
            <summary>
            Defines a managed collection of services.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Add``1(``0)">
            <summary>
            Adds a service to the collection.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceInstance">The service instance to add.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Add(System.Type,System.Object)">
            <summary>
            Adds a service to the collection.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <param name="serviceInstance">The service instance to add.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddNew``2">
            <summary>
            Creates and adds a service to the collection.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TRegisterAs">The type to register as service.</typeparam>
            <returns>The created service instance.</returns>
            <remarks>This method is used to register a service under a different type than the service type.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddNew``1">
            <summary>
            Creates and adds a service to the collection.
            </summary>
            <typeparam name="TService">The type of the service to create.</typeparam>
            <returns>The created service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddNew(System.Type,System.Type)">
            <summary>
            Creates and adds a service to the collection.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <param name="registerAs">The type to register as service.</param>
            <returns>The created service instance.</returns>
            <remarks>This method is used to register a service under a different type than the service type.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddNew(System.Type)">
            <summary>
            Creates and adds a service to the collection.
            </summary>
            <param name="serviceType">The type of the service to create.</param>
            <returns>The created service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddOnDemand``2">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
            <typeparam name="TRegisterAs">The type to register the service as</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddOnDemand``1">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddOnDemand(System.Type,System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
            <param name="registerAs">The type to register the service as</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.AddOnDemand(System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Contains(System.Type)">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            <see langword="true"/>if the serviceType exists; <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Contains``1">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <typeparam name="TService">Type of service to search for.</typeparam>
            <returns>
            <see langword="true"/>if the serviceType exists; <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.ContainsLocal(System.Type)">
            <summary>
            Determines whether the given service type exists directly in the local collection. The parent
            collections are not consulted.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            <see langword="true"/>if the serviceType exists; <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Get(System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Get(System.Type,System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeWeb.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Get``1(System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeWeb.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Get``1">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.GetEnumerator">
            <summary>
            Enumerates through all seen types and retrieves a KeyValuePair for each. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Remove(System.Type)">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
            <param name="serviceType">The service type to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection.Remove``1">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
            <typeparam name="TService">The service type to remove.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage},Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection"/> class.
            </summary>
            <param name="container">The lifetime container the collection will use</param>
            <param name="locator">The locator the collection will use</param>
            <param name="builder">The builder the collection will use</param>
            <param name="parent">The parent collection</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.GetEnumerator">
            <summary>
            Enumerates through all seen types and retrieves a KeyValuePair for each. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Add``1(``0)">
            <summary>
            Adds a service.
            </summary>
            <typeparam name="TService">The type under which to register the service.</typeparam>
            <param name="serviceInstance">The service to register.</param>
            <exception cref="T:System.ArgumentNullException">serviceInstance is null.</exception>
            <exception cref="T:System.ArgumentException">A service of the given type is already registered.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Add(System.Type,System.Object)">
            <summary>
            Adds a service.
            </summary>
            <param name="serviceType">The type under which to register the service.</param>
            <param name="serviceInstance">The service to register.</param>
            <exception cref="T:System.ArgumentNullException">serviceInstance is null.</exception>
            <exception cref="T:System.ArgumentException">A service of the given type is already registered.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddOnDemand``1">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddOnDemand``2">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
            <typeparam name="TRegisterAs">The type to register the service as</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddOnDemand(System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddOnDemand(System.Type,System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
            <param name="registerAs">The type to register the service as</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddNew``1">
            <summary>
            Creates and adds a service.
            </summary>
            <typeparam name="TService">The type of the service to create. This type is also
            the type the service is registered under.</typeparam>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddNew``2">
            <summary>
            Creates a service.
            </summary>
            <typeparam name="TService">The type of the service to create.</typeparam>
            <typeparam name="TRegisterAs">The type the service is registered under.</typeparam>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddNew(System.Type)">
            <summary>
            Creates a service.
            </summary>
            <param name="serviceType">The type of the service to create. This type is also
            the type the service is registered under.</param>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.AddNew(System.Type,System.Type)">
            <summary>
            Creates a service.
            </summary>
            <param name="serviceType">The type of the service to create.</param>
            <param name="registerAs">The type the service is registered under.</param>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Contains``1">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <typeparam name="TService">Type of service to search for.</typeparam>
            <returns>
            true if the TService exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Contains(System.Type)">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            true if the serviceType exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.ContainsLocal(System.Type)">
            <summary>
            Determines whether the given service type exists directly in the local collection. The parent
            collections are not consulted.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            true if the serviceType exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Get``1">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Get``1(System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeWeb.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Get(System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Get(System.Type,System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeWeb.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Remove``1">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
            <typeparam name="TService">The service type to remove.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Remove(System.Type)">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
            <param name="serviceType">The service type to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.OnAdded(System.Object)">
            <summary>
            Called when a new service is added to the collection.
            </summary>
            <param name="service">The service that was added.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.OnRemoved(System.Object)">
            <summary>
            Called when a service is removed from the collection.
            </summary>
            <param name="service">The service that was removed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.BuildFirstTimeItem(System.Type,System.Type,System.Object)">
            <summary>
            Used to build a first time item (either an existing one or a new one). The Builder will
            end up locating it, and we add it to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.BuildRepeatedItem(System.Type,System.Object)">
            <summary>
            Used to "build" an item we've already seen once. We don't use the builder, because that
            would do double-injection. Since it's already in the lifetime container, all we need to
            do is add a second locator registration for it for the right name.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Added">
            <summary>
            Fired whenever a new service is added to the container. For demand-add services, the event is
            fired when the service is eventually created.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.Collections.ServiceCollection.Removed">
            <summary>
            Fired whenever a service is removed from the container. When the services collection is disposed,
            the Removed event is not fired for the services in the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.CompositionContainer">
            <summary>
            Defines anCompositionContainer container for services and managed objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.RegisterTypeMapping``2">
            <summary>
            Add a type mapping to this container. When the container is asked
            to build an instance of type TRequested, it'll actually build an instance
            of TReturned.
            </summary>
            <typeparam name="TRequested"><see cref="T:System.Type"/> that will be requested from the container.</typeparam>
            <typeparam name="TReturned">The type of instance to create. TReturned must
            be assignable to a variable of type TRequested.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Add a type mapping to this container. When the container is asked
            to build an instance of type requested, it'll actually build an instance
            of returned.
            </summary>
            <param name="requested"><see cref="T:System.Type"/> that will be requested from the container.</param>
            <param name="returned">The type of instance that is actually created. objects of
            the returned type must be assignable to variables of the requested type.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.GetMappedType``1">
            <summary>
            Return the type mapped to the given requested type. Will check this container,
            and any parent containers, for a mapping for the requested type.
            </summary>
            <remarks>If there is no mapping, the method returns TRequested.</remarks>
            <typeparam name="TRequested">Type to find the mapping for.</typeparam>
            <returns>The registered mapped type. Returns TRequested if there is no mapping.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.GetMappedType(System.Type)">
            <summary>
            Return the type mapped to the given requested type. Will check this container,
            and any parent containers, for a mapping for the requested type.
            </summary>
            <param name="requested">Type to find the mapping for.</param>
            <returns>The registered mapped type. Returns <paramref name="requested"/> if there is no mapping.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.BuildItem(Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage},Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.Object)">
            <summary>
            Utility method to initialize an object instance without adding it to the container.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> to use to build the object.</param>
            <param name="locator">The <see cref="T:Microsoft.Practices.ObjectBuilder.IReadWriteLocator"/> to use in building the object.</param>
            <param name="item">The object to build.</param>
            <returns>The built and initialized object.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.BuildNewItem(System.Type)">
            <summary>
            Builds a new instance of <paramref name="typeOfItem"/>.
            </summary>
            <param name="typeOfItem">The <see cref="T:System.Type"/> of the object to create and build.</param>
            <returns>The new and built object instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing"><see langword="true"/> when the user code is disposing; 
            <see langword="false"/> when it is the GC.
            </param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.InitializeRootContainer(Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage})">
            <summary>
            Initializes the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> when it is the root of the containment hierarchy.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.InitializeContainer">
            <summary>
            Injection method used to initialize the container instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.OnObjectAdded(System.Object)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeWeb.CompositionContainer.ObjectRemoved"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.CompositionContainer.OnObjectRemoved(System.Object)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeWeb.CompositionContainer.ObjectRemoved"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.Parent">
            <summary>
            Gets or sets the parent container for this container instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.RootContainer">
            <summary>
            Gets the root container instance
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.Builder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> used by this container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.Locator">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IReadWriteLocator"/> used by this container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.Containers">
            <summary>
            Returns a collection describing the child <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> objects in this Container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.CompositionContainer.Services">
            <summary>
            Returns the service collection for this container.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.CompositionContainer.ObjectAdded">
            <summary>
            Event fired when a managed object is added to the container.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeWeb.CompositionContainer.ObjectRemoved">
            <summary>
            Event fired when a managed object is removed from the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo">
            <summary>
            Extends the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo"/> metadata to support module dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo">
            <summary>
            Defines the basic metadata needed to describe a module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo">
            <summary>
            Defines the metadata that describes a module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo.Name">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo.AssemblyName">
            <summary>
            Gets the module assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo.VirtualPath">
            <summary>
            Gets the virtual path to the module location.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo"/> with the given values.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="assemblyName">The assembly implementing the module.</param>
            <param name="virtualPath">The virtual path to the module location.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo.Name">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo.AssemblyName">
            <summary>
            Gets or sets the module assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleInfo.VirtualPath">
            <summary>
            Gets or sets the module location virtual path.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo"/>
            </summary>
            <param name="name">The name of the module.</param>
            <param name="assemblyName">The module assembly.</param>
            <param name="virtualPath">The module location in the web site.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo.Dependencies">
            <summary>
            Gets or sets the list of modules this module depends on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo.Services">
            <summary>
            Gets or sets the list of modules this module will register.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IServiceLoaderService">
            <summary>
            Declares a service which loads services into a <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IServiceLoaderService.Load(Microsoft.Practices.CompositeWeb.CompositionContainer,Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo[])">
            <summary>
            Loads the specified services into the given container.
            </summary>
            <param name="compositionContainer">The container into which create and add the configured services.</param>
            <param name="services">The list of services to load.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ModuleInitializer">
            <summary>
            Defines the base implementation for the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer.Load(Microsoft.Practices.CompositeWeb.CompositionContainer)">
            <summary>
            Noifies the module that it has been loaded.
            </summary>
            <param name="container">A reference to the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> where the module has been loaded.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer.Configure(Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection,System.Configuration.Configuration)">
            <summary>
            Allows the module to process its configuration.
            </summary>
            <param name="services">An <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection"/> collection of all the services available to the module.</param>
            <param name="moduleConfiguration">The <see cref="N:Microsoft.Practices.CompositeWeb.Configuration"/> available to the module.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleInitializer.Load(Microsoft.Practices.CompositeWeb.CompositionContainer)">
            <summary>
            Override to perform operation when the module is loaded.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> where the module has been loaded.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleInitializer.Configure(Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection,System.Configuration.Configuration)">
            <summary>
            Override to process the module configuration.
            </summary>
            <param name="services">An <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IServiceCollection"/> collection of all the services available to the module.</param>
            <param name="moduleConfiguration">The <see cref="N:Microsoft.Practices.CompositeWeb.Configuration"/> available to the module.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationConfigurationSection">
            <summary>
            Configuration section to configure autorization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.AuthorizationConfigurationSection.ModuleRules">
            <summary>
            Gets or sets the authorization rules for a module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement">
            <summary>
            A configuration element to declare module metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="assemblyName">The module assembly.</param>
            <param name="virtualPath">The module location in the web site.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.Name">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.AssemblyName">
            <summary>
            Gets or sets the module assembly name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.VirtualPath">
            <summary>
            Gets or sets the module location.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.Dependencies">
            <summary>
            Gets or sets the modules this module depends on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement.Services">
            <summary>
            Gets or sets the services this module will register.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.#ctor(Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection"/>.
            </summary>
            <param name="modules">The initial set of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.Add(Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/> to the collection.
            </summary>
            <param name="module">A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.Contains(System.String)">
            <summary>
            Tests if the collection contains the configuration for the specified module name.
            </summary>
            <param name="moduleName">The name of the module to search the configuration for.</param>
            <returns><see langword="true"/> if a configuration for the module is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.FindAll(System.Predicate{Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement})">
            <summary>
            Searches the collection for all the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/> that match the specified predicate.
            </summary>
            <param name="match">A <see cref="T:System.Predicate`1"/> that implements the match test.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the successful matches.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for specified element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to get the key for.</param>
            <returns>An <see langword="object"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.ThrowOnDuplicate">
            <summary>
            Indicates that an exception should be raised if a duplicate element is found.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.CollectionType">
            <summary>
            Gets the type of <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.ElementName">
            <summary>
            Gets the name to identify this collection in the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependency">
            <summary>
            Defines a module dependency. Used by <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.DependantModuleInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependency.Name">
            <summary>
            Gets or sets the name of a module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.#ctor(Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection"/>.
            </summary>
            <param name="dependencies">An array of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/> with initial list of dependencies.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for specified element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to get the key for.</param>
            <returns>An <see langword="object"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.CollectionType">
            <summary>
            Gets the type of <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.ElementName">
            <summary>
            Gets the name to identify this collection in the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> for module dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement"/>.
            </summary>
            <param name="moduleName">A module name.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModuleDependencyConfigurationElement.Module">
            <summary>
            Gets or sets the name of a module antoher module depends on.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Configuration.ModulesConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> for module configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Configuration.ModulesConfigurationSection.Modules">
            <summary>
            Gets or sets the collection of modules configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext">
            <summary>
            Interface used to wrap the <see cref="T:System.Web.HttpContext"/> class.
            </summary>
            <remarks>The goal of this interface is to improve testability.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.AddError(System.Exception)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.ClearError">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.GetSection(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.RewritePath(System.String,System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.RewritePath(System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.AllErrors">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Application">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.ApplicationInstance">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Cache">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.CurrentHandler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Error">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Handler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.IsCustomErrorEnabled">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.IsDebuggingEnabled">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Items">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.PreviousHandler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Profile">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Request">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Response">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Server">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Session">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.SkipAuthorization">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Timestamp">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Trace">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.User">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext.Context">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContextLocatorService">
            <summary>
            Defines a service to locate the current <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContextLocatorService.GetCurrentContext">
            <summary>
            Gets the current <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility">
            <summary>
            Interface used to wrap the <see cref="T:System.Web.HttpServerUtility"/> class.
            </summary>
            <remarks>The goal of this interface is to improve testability.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.ClearError">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.CreateObject(System.Type)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.CreateObject(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.CreateObjectFromClsid(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Execute(System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Execute(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Execute(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.GetLastError">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.HtmlDecode(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.HtmlEncode(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.MapPath(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Transfer(System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.Transfer(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.UrlDecode(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
            
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.UrlEncode(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.UrlPathEncode(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.MachineName">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility.ScriptTimeout">
            <summary>
            See <see cref="T:System.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfoStore">
            <summary>
            Defines a store for the module metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfoStore.GetModuleConfigurationSection">
            <summary>
            Gets the module configuration data.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModulesConfigurationSection"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleEnumerator">
            <summary>
            Defines a service that can enumerate the modules needed by the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleEnumerator.EnumerateModules">
            <summary>
            Gets the list of modules needed by the application.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService">
            <summary>
            Declares a service which loads the modules into the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService.Load(Microsoft.Practices.CompositeWeb.CompositionContainer,Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo[])">
            <summary>
            Loads the specified modules into the given container.
            </summary>
            <param name="rootContainer">The <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> into which create the container for the modules.</param>
            <param name="modulesInfo">The list of modules to load.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService.FindInitializer(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/> for the speficied module name.
            </summary>
            <param name="moduleName">The name of the module to search for the initializer.</param>
            <returns>An <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.ISessionStateLocatorService">
            <summary>
            Define a service used to locate the session state.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISessionStateLocatorService.GetSessionState">
            <summary>
            Gets the session state as a <see cref="T:System.Web.SessionState.IHttpSessionState"/> implementation.
            </summary>
            
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService">
            <summary>
            Defines a service used to register <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> objects.
            </summary>
            <remarks>This service allows the dynamic creation of a <see cref="T:System.Web.SiteMap"/> during the
            module load stage. This service is consumed by the <see cref="T:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider"/> when building
            the <see cref="T:System.Web.SiteMap"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo)">
            <summary>
            Adds a node as child of the root node.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.Int32)">
            <summary>
            Adds a node as a child of the root node and sets the order with which the node should be displayed.
            </summary>
            <param name="node">The node to add.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo)">
            <summary>
            Adds a node as a child of another node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.Int32)">
            <summary>
            Adds a node as a child of another node, and sets the order with which to display the node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String)">
            <summary>
            Adds a node with an authorization rule.
            </summary>
            <param name="node">The node to add.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String,System.Int32)">
            <summary>
            Adds a node with an authorization rule and the specified display order.
            </summary>
            <param name="node">The node to add.</param>
            <param name="authorizationRule">The authorization rule required to access the node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String)">
            <summary>
            Adds a node with an authorization rule as child of another node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String,System.Int32)">
            <summary>
            Adds a node under the parent node, with the specified authorization rule and display order.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.GetChildren(System.String)">
            <summary>
            Gets the children of the specified node.
            </summary>
            <param name="nodeKey">The key of the parent node.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> collection of the child nodes.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.GetAuthorizationRule(System.String)">
            <summary>
            Gets the authorization rule associated with the specified node.
            </summary>
            <param name="nodeKey">The key to the node.</param>
            <returns>The authorization rule associated with the node.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService.RootNode">
            <summary>
            Gets the site map root node.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapNodeLocator">
            <summary>
            Defines a service to search for <see cref="T:System.Web.SiteMapNode"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapNodeLocator.FindSiteMapNodeFromKey(System.String)">
            <summary>
            Searches the <see cref="T:System.Web.SiteMap"/> for a node with the specified key.
            </summary>
            <param name="key">The lookup key.</param>
            <returns>The <see cref="T:System.Web.SiteMapNode"/> with the specified key, or <see langword="null"/>
            if there is no node with that key.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapNodeLocator.RootNode">
            <summary>
            Gets the root node of the <see cref="T:System.Web.SiteMap"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue">
            <summary>
            Defines the contract for the values that should be stored in the session state.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue.SetDefault">
            <summary>
            Sets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue.SessionState">
            <summary>
            Gets or sets the session state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue.Value">
            <summary>
            Gets or sets the actual value from or to the session state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue.KeyName">
            <summary>
            Gets or sets the key of the value in the session state.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService">
            <summary>
            Interface to wrap the <see cref="T:System.Web.VirtualPathUtility"/> class.
            </summary>
            <remarks>The goal of this interface is to improve testability.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.AppendTrailingSlash(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.Combine(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.GetDirectory(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.GetExtension(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.GetFileName(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.IsAbsolute(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.IsAppRelative(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.MakeRelative(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.RemoveTrailingSlash(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.ToAbsolute(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.ToAbsolute(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.ToAppRelative(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService.ToAppRelative(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for a description.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IWebClientApplication">
            <summary>
            Defines the contract for the Web Client Application.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IWebClientApplication.ApplicationBuilder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> used by the application and its modules.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IWebClientApplication.PageBuilder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> used to create and initialize the page handlers.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Interfaces.IWebClientApplication.RootContainer">
            <summary>
            Gets the application root <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlanPolicy">
            <summary>
            This policy stores the currently available build plans based
            on type and ID.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlanPolicy.Get(System.Type)">
            <summary>
            Return a BuildPlan for the specified Type.
            </summary>
            <param name="typeToBuild">The Type to build</param>
            <returns>The BuildPlan</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlanPolicy.Set(System.Type,Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlan)">
            <summary>
            Sets a BuildPlan for a specific Type.
            </summary>
            <param name="typeToBuild">The Type to be built</param>
            <param name="plan">The BuildPlan to asociate.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanPolicy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanPolicy.Get(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToBuild"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanPolicy.Set(System.Type,Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlan)">
            <summary>
            
            </summary>
            <param name="typeToBuild"></param>
            <param name="plan"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanStrategy">
            <summary>
            A builder strategy that will use a build plan to do the construction and injection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.BuildPlanStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Implementation of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type of the object being built.</param>
            <param name="existing">The existing instance of the object.</param>
            <param name="idToBuild">The ID of the object being built.</param>
            <returns>The built object.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.AttributeBasedConstructorChooser">
            <summary>
            An implementation of IChooseConstructorPolicy that duplicates the usual OB logic:
            If only one constructor, choose that, otherwise look for one that has the
            InjectionConstructorAttribute on it.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.IConstructorChooserPolicy">
            <summary>
            Interface defining the policy used to determine which constructor to use.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.IConstructorChooserPolicy.ChooseConstructor(System.Type)">
            <summary>
            Determines a single constructor from a given Type.
            </summary>
            <param name="t"> Type to choose a constructor from.</param>
            <returns> The choosen constructor.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.AttributeBasedConstructorChooser.ChooseConstructor(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.IConstructorChooserPolicy.ChooseConstructor(System.Type)"/> for more information.
            </summary>
            <param name="t"> Type to choose a constructor from. </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.CallConstructorStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.PlanBuilderStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.PlanBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="idToBuild"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.PlanBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="idToBuild"></param>
            <param name="il"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.CallConstructorStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="idToBuild"></param>
            <param name="il"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.DefaultConstructorChooserPolicy">
            <summary>
            A Default implementation of <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.IConstructorChooserPolicy"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.DefaultConstructorChooserPolicy.ChooseConstructor(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Creation.IConstructorChooserPolicy.ChooseConstructor(System.Type)"/> for more information.
            </summary>
            <param name="t"> Type to choose a constructor from. </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.BuildUpHandler">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodBuildPlan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlan">
            <summary>
            Interface defining how to call a build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IBuildPlan.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Interface of BuildUp/>.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type of the object being built.</param>
            <param name="existing">The existing instance of the object.</param>
            <param name="id">The ID of the object being built.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodBuildPlan.#ctor(Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.BuildUpHandler)">
            <summary>
            
            </summary>
            <param name="buildUpMethod"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodBuildPlan.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodPlanBuilderPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IPlanBuilderPolicy">
            <summary>
            This interface defines the contract for creating a new build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.IPlanBuilderPolicy.CreatePlan(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="typeToBuild"></param>
            <param name="idToBuild"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodPlanBuilderPolicy.#ctor(Microsoft.Practices.ObjectBuilder.IBuilderStrategyChain)">
            <summary>
            
            </summary>
            <param name="strategies"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodPlanBuilderPolicy.#ctor(Microsoft.Practices.ObjectBuilder.IBuilderStrategyChain,Microsoft.Practices.ObjectBuilder.PolicyList)">
            <summary>
            
            </summary>
            <param name="strategies"></param>
            <param name="policies"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.DynamicMethodPlanBuilderPolicy.CreatePlan(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="typeToBuild"></param>
            <param name="idToBuild"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.AttributeBasedMethodChooser">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.IMethodChooserPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.IMethodChooserPolicy.GetMethods(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.AttributeBasedMethodChooser.GetMethods(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.CallMethodsStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Method.CallMethodsStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="idToBuild"></param>
            <param name="il"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.CreateNewParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver">
            <summary>
            A simple implementation of IParameterResolver that provides some
            useful utility methods, mainly around method lookup.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.GetTypeFromHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.GetMethodInfo``1(System.String,System.Type[])">
            <summary>
            
            </summary>
            <typeparam name="TypeToSearch"></typeparam>
            <param name="methodName"></param>
            <param name="argumentTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.GetPropertyGetter``1(System.String,System.Type)">
            <summary>
            
            </summary>
            <typeparam name="TypeToSearch"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.GetPropertySetter``1(System.String,System.Type)">
            <summary>
            
            </summary>
            <typeparam name="TypeToSearch"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.GetConstructor``1(System.Type[])">
            <summary>
            
            </summary>
            <typeparam name="TypeToSearch"></typeparam>
            <param name="ctorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.EmitLoadType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="t"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver.ObtainGetFromLocatorMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.CreateNewParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.DependencyParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.DependencyParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolverMap">
            <summary>
            Maps <see cref="T:Microsoft.Practices.ObjectBuilder.ParameterAttribute"/> types to their <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver"/> type used to emit IL code for the BuildPlan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolverMap.GetResolver(Microsoft.Practices.ObjectBuilder.ParameterAttribute)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver"/> registered for a specific <see cref="T:Microsoft.Practices.ObjectBuilder.ParameterAttribute"/>.
            </summary>
            <param name="resolutionAttribute">The parameter to get the registered resolver for.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver"/> used to emit the IL code.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolverMap.AddResolver(System.Type,Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.IParameterResolver)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ParameterResolver"/> used to resolve a specific <see cref="T:Microsoft.Practices.ObjectBuilder.ParameterAttribute"/>.
            </summary>
            <param name="attributeType">The type, which should be assignable from <see cref="T:Microsoft.Practices.ObjectBuilder.ParameterAttribute"/>.</param>
            <param name="parameterResolver">The resolver used to emit the IL code.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ProviderDependencyParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ProviderDependencyParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ServiceDependencyParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.ServiceDependencyParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.StateDependencyParameterResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Parameters.StateDependencyParameterResolver.EmitParameterResolution(System.Reflection.Emit.ILGenerator,Microsoft.Practices.ObjectBuilder.ParameterAttribute,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="paramAttr"></param>
            <param name="parameterType"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.AttributeBasedPropertyChooser">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.IPropertyChooserPolicy">
            <summary>
            Policy used by build plan generator to decide which properties on a type
            to do injection on.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.IPropertyChooserPolicy.GetInjectionProperties(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.AttributeBasedPropertyChooser.GetInjectionProperties(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.DefaultPropertyChooserPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.DefaultPropertyChooserPolicy.GetInjectionProperties(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.SetPropertiesStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.BuildPlan.DynamicMethodPlan.Properties.SetPropertiesStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="typeToBuild"></param>
            <param name="existing"></param>
            <param name="idToBuild"></param>
            <param name="il"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ConstructorReflectionStrategy">
            <summary>
            Strategy that performs injection of constructor policies.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1">
            <summary>
            Base generic strategy for all injection attribute processors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Retrieves the list of members to iterate looking for 
            injection attributes, such as properties and constructor 
            parameters.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">Type being built.</param>
            <param name="existing">Existing object being built, if available.</param>
            <param name="idToBuild">The ID being built.</param>
            <returns>An enumerable wrapper around the IReflectionMemberInfo{T} interfaces that
            represent the members to be inspected for reflection.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.BuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})">
            <summary>
            Abstract method which takes parameters and adds them to the appropriate policy.
            Must be overridden in derived classes.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type being built.</param>
            <param name="idToBuild">The ID being built.</param>
            <param name="member">The member that's being reflected over.</param>
            <param name="parameters">The parameters used to satisfy the member call.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0})">
            <summary>
            Abstract method used to determine whether a member should be processed. Must be overridden
            in derived classes.
            </summary>
            <param name="member">The member being reflected over.</param>
            <returns>Returns true if the member should get injection; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ConstructorReflectionStrategy.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ConstructorReflectionStrategy.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.ConstructorInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ConstructorReflectionStrategy.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.ConstructorInfo})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0})"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.CreationStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderStrategy"/> which creates objects.
            </summary>
            <remarks>
            <para>This strategy looks for policies in the context registered under the interface type
            <see cref="T:Microsoft.Practices.ObjectBuilder.ICreationPolicy"/>. If it cannot find a policy on how to create the object,
            it will select the first constructor that returns from reflection, and re-runs the chain
            to create all the objects required to fulfill the constructor's parameters.</para>
            <para>If the Build method is passed an object via the existing parameter, then it
            will do nothing (since the object already exists). This allows this strategy to be
            in the chain when running dependency injection on existing objects, without fear that
            it will attempt to re-create the object.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.CreationStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Override of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>. Creates the requested object.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type of object to be created.</param>
            <param name="existing">The existing object. If not null, this strategy does nothing.</param>
            <param name="idToBuild">The ID of the object to be created.</param>
            <returns>The created object</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.MethodReflectionStrategy">
            <summary>
            Strategy that describes method call via attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.MethodReflectionStrategy.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.MethodReflectionStrategy.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.MethodInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.MethodReflectionStrategy.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.MethodInfo})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0})"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.PropertyReflectionStrategy">
            <summary>
            Strategy that describes property injection via attributes.
            </summary>
            <remarks>
            This strategy processes any injection attribute that inherits from <see cref="T:Microsoft.Practices.ObjectBuilder.ParameterAttribute"/>, 
            thus providing a generic strategy that easily allows for extension through new injection attributes and 
            their corresponding <see cref="T:Microsoft.Practices.ObjectBuilder.IParameter"/> implementations (if necessary) to retrieve values.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.PropertyReflectionStrategy.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.GetMembers(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.PropertyReflectionStrategy.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.AddParametersToPolicy(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.String,Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0},System.Collections.Generic.IEnumerable{Microsoft.Practices.ObjectBuilder.IParameter})"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.PropertyReflectionStrategy.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{System.Reflection.PropertyInfo})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.ReflectionStrategy`1.MemberRequiresProcessing(Microsoft.Practices.ObjectBuilder.IReflectionMemberInfo{`0})"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.SimplifiedSingletonStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.Strategies.SimplifiedSingletonStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Implementation of <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/>.
            </summary>
            <param name="context">The build context.</param>
            <param name="typeToBuild">The type of the object being built.</param>
            <param name="existing">The existing instance of the object.</param>
            <param name="idToBuild">The ID of the object being built.</param>
            <returns>The built object.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilder">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> which uses <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage"/>
            as the stages of the build process. It is very similar to <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/>, but has a custom
            locking strategy, which is finer grained than the previous locking strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1">
            <summary>
            An implementation helper class for <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/>.
            </summary>
            <typeparam name="TStageEnum">The build stage enumeration.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.#ctor(Microsoft.Practices.ObjectBuilder.IBuilderConfigurator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1"/> class using the
            provided configurator.
            </summary>
            <param name="configurator">The configurator that will configure the builder.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.String,System.Object,Microsoft.Practices.ObjectBuilder.PolicyList[])">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilder`1.BuildUp``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.String,System.Object,Microsoft.Practices.ObjectBuilder.PolicyList[])"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.BuildUp(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.Type,System.String,System.Object,Microsoft.Practices.ObjectBuilder.PolicyList[])">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilder`1.BuildUp(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,System.Type,System.String,System.Object,Microsoft.Practices.ObjectBuilder.PolicyList[])"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.TearDown``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,``0)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilder`1.TearDown``1(Microsoft.Practices.ObjectBuilder.IReadWriteLocator,``0)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.Policies">
            <summary>
            See <see cref="P:Microsoft.Practices.ObjectBuilder.IBuilder`1.Policies"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderBase`1.Strategies">
            <summary>
            See <see cref="P:Microsoft.Practices.ObjectBuilder.IBuilder`1.Strategies"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilder"/> class 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilder.#ctor(Microsoft.Practices.ObjectBuilder.IBuilderConfigurator{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilder"/> class using the provided
            configurator.
            </summary>
            <param name="configurator">The configurator that will configure the builder.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage">
            <summary>
            Enumeration to represent the object builder stages used by
            the WCSF builder.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage.TypeMapping">
            <summary>
            Strategies in this stage run before everything else. This is where
            type mapping is performed.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage.PreCreation">
            <summary>
            Strategies in this stage run before creation. Typical work done in this stage might
            include strategies that use reflection to set policies into the context that other
            strategies would later use.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage.Creation">
            <summary>
            Strategies in this stage create objects. Typically you will only have a single policy-driven
            creation strategy in this stage.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage.Initialization">
            <summary>
            Strategies in this stage work on created objects. Typical work done in this stage might
            include setter injection and method calls.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage.PostInitialization">
            <summary>
            Strategies in this stage work on objects that are already initialized. Typical work done in
            this stage might include looking to see if the object implements some notification interface
            to discover when its initialization stage has been completed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ServiceLoaderService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IServiceLoaderService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceLoaderService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.ServiceLoaderService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceLoaderService.Load(Microsoft.Practices.CompositeWeb.CompositionContainer,Microsoft.Practices.CompositeWeb.Configuration.ServiceInfo[])">
            <summary>
            Loads the specified services into the given container.
            </summary>
            <param name="compositionContainer">The container into which create and add the configured services.</param>
            <param name="services">The list of services to load.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo">
            <summary>
            Holds information for a <see cref="T:System.Web.SiteMapNode"/> published by a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> using the specified key to identify the page the node represents.
            </summary>
            <param name="key">The lookup key.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> using the specified url and key to identify the page the node represents.
            </summary>
            <param name="key">The lookup key.</param>
            <param name="url">The url of the page that the node represents.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> using the specified title, url and the key to identify the page the node represents.
            </summary>
            <param name="key">The lookup key.</param>
            <param name="url">The url of the page that the node represents.</param>
            <param name="title">The title for the node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> using the specified description, title, url and the key to identify the page the node represents.
            </summary>
            <param name="key">The lookup key.</param>
            <param name="url">The url of the page that the node represents.</param>
            <param name="title">The title for the node.</param>
            <param name="description">A description of the page the node represents.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.IList,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo"/> using the specified roles, additional attributes,
            explicit and implicit resource keys for localization, description, title, url and the key to identify the page the node represents.
            </summary>
            <param name="key">The lookup key.</param>
            <param name="url">The url of the page that the node represents.</param>
            <param name="title">The title for the node.</param>
            <param name="description">A description of the page the node represents.</param>
            <param name="roles">An <see cref="T:System.Collections.IList"/> of roles allowed to view the page the node represents.</param>
            <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of additional values to initialize the node.</param>
            <param name="explicitResourceKeys">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of explicit resource keys used for localization.</param>
            <param name="implicitResourceKey">An implicit resource key used for localization.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.ImplicitResourceKey">
            <summary>
            Gets or sets the implicit resource key used for localization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.ExplicitResourcesKey">
            <summary>
            Gets a <see cref="T:System.Collections.Specialized.NameValueCollection"/> of explicit resource keys used for localization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Attributes">
            <summary>
            Gets a <see cref="T:System.Collections.Specialized.NameValueCollection"/> of additional values to initialize the node.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Roles">
            <summary>
            Gets and <see cref="T:System.Collections.IList"/> of the roles allowed to view the page represented by the node.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Description">
            <summary>
            Gets or sets the node description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Title">
            <summary>
            Gets or sets the node Title.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Url">
            <summary>
            Gets or sets the url of the page represented by the node.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SiteMapNodeInfo.Key">
            <summary>
            Gets or sets the lookup key for the node.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ModuleDependencySolver">
            <summary>
            Used by the <see cref="T:Microsoft.Practices.CompositeWeb.Services.ModuleLoaderService"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException">This exception is thrown
            when a cycle is found in the defined depedency graph.</exception>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.OptionalDependencyAttribute">
            <summary>
            Base class for dependency attributes that can be made optional.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.OptionalDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.OptionalDependencyAttribute.Required">
            <summary>
            Whether the dependency is required. Defaults to true.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Presenter`1">
            <summary>
            Base class for presenters
            </summary>
            <typeparam name="TView">The type of the view this presenter is bound to</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Presenter`1.OnViewInitialized">
            <summary>
            This method is invoked by the view the first time it loads
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Presenter`1.OnViewLoaded">
            <summary>
            This method is invoked by the view everytime it loads
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Presenter`1.View">
            <summary>
            The view this presenter is bound to
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.BuilderHasNoStrategies">
            <summary>
              Looks up a localized string similar to Object builder has no strategies..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.CannotAddContainerToItself">
            <summary>
              Looks up a localized string similar to A Container cannot be added to itself..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.CannotCreateInstanceOfType">
            <summary>
              Looks up a localized string similar to Can not create an instance of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.CyclicDependencyFound">
            <summary>
              Looks up a localized string similar to Cyclical dependency found while loading modules..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module &apos;{0}&apos;; call AddModule() before AddDependency().
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DuplicatedModuleLocationOrAssemblyName">
            <summary>
              Looks up a localized string similar to Modules with duplicated &apos;VirtualPath&apos; or &apos;AssemblyName&apos; were found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DuplicateID">
            <summary>
              Looks up a localized string similar to An object with this ID already exists: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DuplicateKeyExceptionMessage">
            <summary>
              Looks up a localized string similar to A node with a duplicate key was added to the site map..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.DuplicateService">
            <summary>
              Looks up a localized string similar to A service of this type already exists: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.FailedToLoadModule">
             <summary>
               Looks up a localized string similar to Failed to load module from assembly {0}. Error was:
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.HttpSessionStateNotInitialized">
            <summary>
              Looks up a localized string similar to HttpSessionState is not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value of the argument {0} provided for the enumeration {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.MissingPolicyNamed">
            <summary>
              Looks up a localized string similar to Missing policy to build {0} named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.MissingPolicyUnnamed">
            <summary>
              Looks up a localized string similar to Missing policy to build unnamed {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.NoAppropriateConstructor">
            <summary>
              Looks up a localized string similar to Could not find an appropriately matching constructor..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.NoRemoveContainerFromManagedObjectCollection">
            <summary>
              Looks up a localized string similar to Removing Containers is not permitted. Use Container.Terminate or Container.Dispose to clean up a Container..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.ProviderDependencyPropertyNotFound">
            <summary>
              Looks up a localized string similar to The provided type {0} has not a static property {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.ServiceMissingExceptionMessage">
            <summary>
              Looks up a localized string similar to Service {0}, required for component {1} is not available in the current context..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.ServiceMissingExceptionSimpleMessage">
            <summary>
              Looks up a localized string similar to Service {0} is not available in the current context..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.SiteMapRootNodeKey">
            <summary>
              Looks up a localized string similar to __ROOT__.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.TypeNotCompatible">
            <summary>
              Looks up a localized string similar to The provided type {0} is not compatible with {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Properties.Resources.UserDoesntHaveAccessToTheRequestedResource">
            <summary>
              Looks up a localized string similar to The page you&apos;re trying to reach is unavailable..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute">
            <summary>
            Indicates that property or parameter is a dependency on type providing a ProviderBase derived type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new intance of the <see cref="T:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute"/>.
            </summary>
            <param name="providerHostType">The type from which to get the provider instance.</param>
            <remarks>Use this constructor when the provider can be get from a "Provider" property on the <paramref name="providerHostType"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute"/>.
            </summary>
            <param name="providerHostType">The type from which to get the provider instance.</param>
            <param name="providerGetterProperty">The name of the property on the <paramref name="providerHostType"/> to retrieve
            the provider from.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute.ProviderGetterProperty">
            <summary>
            Gets the name of the property from which to get the provider from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ProviderDependencyAttribute.ProviderHostType">
            <summary>
            Gets the type to query for the provider.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider">
            <summary>
            Implements a <see cref="T:System.Web.SiteMapProvider"/> that build the <see cref="T:System.Web.SiteMap"/> based on
            the nodes published by the modules using the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.BuildSiteMap">
            <summary>
            Builds the <see cref="T:System.Web.SiteMap"/> managed by the provider.
            </summary>
            <returns>The root <see cref="T:System.Web.SiteMapNode"/> for the provider.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.GetRootNodeCore">
            <summary>
            Retrieves the root node of all the nodes that are currently managed by the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.IsAccessibleToUser(System.Web.HttpContext,System.Web.SiteMapNode)">
            <summary>
            Determines whether the specified  <see cref="T:System.Web.SiteMapNode"/> object can be 
            viewed by the user in the specified context.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> that contains user information.</param>
            <param name="node">The <see cref="T:System.Web.SiteMapNode"/> that is requested by the user.</param>
            <returns><see langword="true"/>	if the node can be viewed by the user; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.IsAccessibleToUser(System.Web.SiteMapNode)">
            <summary>
            Determines whether the specified  <see cref="T:System.Web.SiteMapNode"/> object can be 
            viewed by the user in the specified context.
            </summary>
            <param name="node">The <see cref="T:System.Web.SiteMapNode"/> that is requested by the user.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.SiteMapBuilder">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.ISiteMapBuilderService"/> to use when building the <see cref="T:System.Web.SiteMap"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Providers.ModuleSiteMapProvider.AuthorizationService">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IAuthorizationService"/> to use to determine the node accessibility.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Providers.RoleProvider">
            <summary>
            Extends the <see cref="T:System.Web.Security.SqlRoleProvider"/> by using the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IRolesCatalog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Providers.RoleProvider.LoadRoles">
            <summary>
            Loads the roles from the provider into the catalog.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Providers.RoleProvider.RolesCatalog">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IRolesCatalog"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ServiceDependencyAttribute">
            <summary>
            Indicates that property or parameter is a dependency on a service and
            should be dependency injected when the class is put into a <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceDependencyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.ServiceDependencyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.ServiceDependencyAttribute.Type">
            <summary>
            Gets or sets the type of the service the property expects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.HttpContextLocatorService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContextLocatorService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.HttpContextLocatorService.GetCurrentContext">
            <summary>
            Gets the current <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleConfigurationLocatorService">
            <summary>
            Defines a service which retrieves the configuration for a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleConfigurationLocatorService.FindModuleConfiguration(System.String)">
            <summary>
            Gets the <see cref="T:System.Configuration.Configuration"/> for the specified module name.
            </summary>
            <param name="moduleName">The name of the module to lookup the configuration for.</param>
            <returns>A <see cref="T:System.Configuration.Configuration"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleContainerLocatorService">
            <summary>
            Defines a service to locate the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> of a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Interfaces.IModuleContainerLocatorService.GetContainer(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> for the module the requested url belongs to.
            </summary>
            <param name="relativeRequestUrl">The requested url.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleConfigurationLocatorService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService.#ctor(Microsoft.Practices.CompositeWeb.CompositionContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService"/>.
            </summary>
            <param name="container">The container for this service.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService.FindModuleConfiguration(System.String)">
            <summary>
            Gets the <see cref="T:System.Configuration.Configuration"/> for the specified module name.
            </summary>
            <param name="moduleName">The name of the module to lookup the configuration for.</param>
            <returns>A <see cref="T:System.Configuration.Configuration"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService.ModuleEnumerator">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleEnumerator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Services.ModuleConfigurationLocatorService.ModuleLoaderService">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ModuleContainerLocatorService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleContainerLocatorService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleContainerLocatorService.#ctor(Microsoft.Practices.CompositeWeb.CompositionContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.ModuleContainerLocatorService"/>.
            </summary>
            <param name="rootContainer">The container of the service.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleContainerLocatorService.GetContainer(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> for the module the requested url belongs to.
            </summary>
            <param name="relativeRequestUrl">The requested url.</param>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ModuleLoaderService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleLoaderService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoaderService.Load(Microsoft.Practices.CompositeWeb.CompositionContainer,Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo[])">
            <summary>
            Loads the specified modules into the given container.
            </summary>
            <param name="rootContainer">The container into wich create and add the module published services.</param>
            <param name="modulesInfo">The list of modules to load.</param>
            <remarks>A <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> is created for every module in the list and added to the 
            <paramref name="rootContainer"/>. The Load() method is called on every module that
            exposes a <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ModuleLoaderService.FindInitializer(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/> exposed by the requested module.
            </summary>
            <param name="moduleName">The name of the module to get its initializer.</param>
            <returns>The exposed <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInitializer"/> if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.ServiceException">
            <summary>
            A generic exception to signal that an error has ocurred in a service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceException.#ctor">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.ServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ServiceMissingException">
            <summary>
            Exception thrown when a required service doesn't exist in 
            the component container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.Type)">
            <summary>
            Initializes the exception for the given service type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.Type,System.Object)">
            <summary>
            Initializes the exception for the given service type and component.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.Type,System.Object,System.Exception)">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ServiceMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.SessionStateLocatorService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.ISessionStateLocatorService"/> service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SessionStateLocatorService.GetSessionState">
            <summary>
            Gets the session state as a <see cref="T:System.Web.SessionState.IHttpSessionState"/> implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService">
            <summary>
            Service implementing the site map information needed to later build the site map.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo)">
            <summary>
            Adds a node as child of the root node.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.Int32)">
            <summary>
            Adds a node as a child of the root node and sets the order with which the node should be displayed.
            </summary>
            <param name="node">The node to add.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo)">
            <summary>
            Adds a node as a child of another node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.Int32)">
            <summary>
            Adds a node as a child of another node, and sets the order with which to display the node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String)">
            <summary>
            Adds a node with an authorization rule.
            </summary>
            <param name="node">The node to add.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String,System.Int32)">
            <summary>
            Adds a node with an authorization rule and the specified display order.
            </summary>
            <param name="node">The node to add.</param>
            <param name="authorizationRule">The authorization rule required to access the node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String)">
            <summary>
            Adds a node with an authorization rule as child of another node.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.AddNode(Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,Microsoft.Practices.CompositeWeb.SiteMapNodeInfo,System.String,System.Int32)">
            <summary>
            Adds a node under the parent node, with the specified authorization rule and display order.
            </summary>
            <param name="node">The node to add.</param>
            <param name="parent">The node under which to add the new node.</param>
            <param name="authorizationRule">The authorizarion rule required to access the node.</param>
            <param name="preferredDisplayOrder">The node display order.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.GetChildren(System.String)">
            <summary>
            Gets the children of the specified node.
            </summary>
            <param name="nodeKey">The key of the parent node.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> collection of the child nodes.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.GetAuthorizationRule(System.String)">
            <summary>
            Gets the authorization rule associated with the specified node.
            </summary>
            <param name="nodeKey">The key to the node.</param>
            <returns>The authorization rule associated with the node.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Services.SiteMapBuilderService.RootNode">
            <summary>
            Gets the current root node.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IVirtualPathUtilityService"/> wrapping the <see cref="T:System.Web.VirtualPathUtility"/>.
            </summary>
            <remarks>The goal of this class is to improve testability.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.AppendTrailingSlash(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.Combine(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.GetDirectory(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.GetExtension(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.GetFileName(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.IsAbsolute(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.IsAppRelative(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.MakeRelative(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.RemoveTrailingSlash(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.ToAbsolute(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.ToAbsolute(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.ToAppRelative(System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.VirtualPathUtilityService.ToAppRelative(System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.VirtualPathUtility"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfoStore"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore"/>.
            </summary>
            <param name="baseDirectory">The directory from which to start searching for the 
            configuration files.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.WebConfigModuleInfoStore.GetModuleConfigurationSection">
            <summary>
            Gets the module configuration data.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.CompositeWeb.Configuration.ModulesConfigurationSection"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Services.WebModuleEnumerator">
            <summary>
            Implements a <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleEnumerator"/> that gets the module metadata from
            the module configuration files.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.WebModuleEnumerator.#ctor(Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfoStore)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Services.WebModuleEnumerator"/>.
            </summary>
            <param name="store">The <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfoStore"/> to use to get the module configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Services.WebModuleEnumerator.EnumerateModules">
            <summary>
            Gets the list of modules needed by the application.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IModuleInfo"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.SessionStateKeyAttribute">
            <summary>
            Declares that the field value should be get or set from the session.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.SessionStateKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.SessionStateKeyAttribute"/>
            </summary>
            <param name="sessionKeyName">The name of the key to use to store the field value in the session.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.SessionStateKeyAttribute.SessionKeyName">
            <summary>
            Gets the name of the key to use to store the field value in the session.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.StateDependencyAttribute">
            <summary>
            Indicates that property or parameter is a dependency on a <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue"/> and
            should be dependency injected when the class is put into a <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.StateDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeWeb.StateDependencyAttribute"/> class.
            <param name="keyName">The key used to retrieve the state value from the session</param>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.StateDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.StateDependencyAttribute.KeyName">
            <summary>
            Gets the current key used to retrieve the state value from the session
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Utility.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="data">Information related to the event.</param>
            <exception cref="T:System.ArgumentNullException">The data is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.DataEventArgs`1.ToString">
            <summary>
            Provides a string representation of the argument data.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.DataEventArgs`1.Data">
            <summary>
            Gets the information related to the event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Utility.Guard">
            <summary>
            Utility class used to check for exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.Guard.EnumValueIsDefined(System.Type,System.Object,System.String)">
            <summary>
            Checks an Enum argument to ensure that its value is defined by the specified Enum type.
            </summary>
            <param name="enumType">The Enum type the value should correspond to.</param>
            <param name="value">The value to check for.</param>
            <param name="argumentName">The name of the argument holding the value.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.Guard.TypeIsAssignableFromType(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignee">The argument type.</param>
            <param name="providedType">The type it must be assignable from.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#Add(`0,System.Collections.Generic.List{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#TryGetValue(`0,System.Collections.Generic.List{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist, 
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition 
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Remove(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The 
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Utility.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Utility.OutputValidationUtility">
            <summary>
            Utility calss used to encode output values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.OutputValidationUtility.Encode``1(``0)">
            <summary>
            Encodes the specified entity values.
            </summary>
            <typeparam name="T">The type of the entity to encode.</typeparam>
            <param name="entityToEncode">The entity instance to encode.</param>
            <returns>The encoded entity.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Utility.OutputValidationUtility.Encode``1(System.Collections.Generic.IList{``0})">
            <summary>
            Encodes a set of entities of the same type.
            </summary>
            <typeparam name="T">The type of the entities to encode.</typeparam>
            <param name="entitiesToEncode">The list of entities to encode.</param>
            <returns>A list of encoded entities.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException">
            <summary>
            Exception that is thrown by the <see cref="T:Microsoft.Practices.CompositeWeb.ModuleDependencySolver"/> when an error occurs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException.#ctor">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.ModuleDependencySolverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.WebClientApplication">
            <summary>
            Defines the application class for a composite web application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.Application_PreRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute"/> event.
            </summary>
            <param name="sender">The object firing the event.</param>
            <param name="e">The event associated data.</param>
            <remarks>Handles the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute"/> event and calls the InnerPreRequestHandlerExecute method, 
            that can be overridden to change how to handle web requests or add extra behavior.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.Application_PostRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute"/> event.
            </summary>
            <param name="sender">The object firing the event.</param>
            <param name="e">The event associated data.</param>
            <remarks>Handles the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute"/> event and calls the InnerPostRequestHandlerExecute method,
            that can be overridden to add extra after the handler was executed.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.InnerPreRequestHandlerExecute(Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext)">
            <summary>
            Performs the setup operations needed before executing the request handler.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/> on which the request is being processed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.InnerPostRequestHandlerExecute(Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext)">
            <summary>
            Performs the operation needed after executing the request handler.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/> on which the request is being processed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.PrePageExecute(System.Web.UI.Page)">
            <summary>
            Override this method to add the desired behavior to execute before the requested <see cref="T:System.Web.UI.Page"/> handler is executed.
            </summary>
            <param name="page">The requested <see cref="T:System.Web.UI.Page"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.PostPageExecute(System.Web.UI.Page)">
            <summary>
            Override this method to add the desired behavior to execute after the requested <see cref="T:System.Web.UI.Page"/> handler is executed.
            </summary>
            <param name="page">The requested <see cref="T:System.Web.UI.Page"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.GetModuleContainer(Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext)">
            <summary>
            Returns an <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> for the module handling the current request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/> on which the request is being processed.</param>
            <returns>An <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> object.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.Application_Start(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="M:Microsoft.Practices.CompositeWeb.WebClientApplication.Start"/> event and defines the application lifecycle.
            </summary>
            <param name="sender">The object firing the event.</param>
            <param name="e">The event associated data.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.AddBuilderStrategies(Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.CompositeWeb.ObjectBuilder.WCSFBuilderStage})">
            <summary>
            Adds the required builder strategies to the specified builder.
            </summary>
            <param name="builder">An <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> instance.</param>
            <remarks>Override this method to add or change the used strategies.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.AddRequiredServices">
            <summary>
            Adds the required application services to the root container.
            </summary>
            <remarks>Override this method to add or change the services available in the root container.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.AddServiceIfMissing``2(Microsoft.Practices.CompositeWeb.CompositionContainer)">
            <summary>
            Utility method to add a service to the container only if that service is not already in the container.
            </summary>
            <typeparam name="TService">The type implementing the service.</typeparam>
            <typeparam name="TRegisterAs">The type of service to register.</typeparam>
            <param name="container">The container where to add the service.</param>
            <returns>The added servie instance on <see langword="null"/> if the service was not added.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.CreateApplicationBuilder">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> to be used by the application and its modules.
            </summary>
            <remarks>Override this method to change the builder to use and/or the used policies.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.CreatePageBuilder">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> to be used to build the requested page handlers.
            </summary>
            <remarks>Override this method to change the builder to use and/or the used policies.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.CreateRootContainer">
            <summary>
            Creates the application root container.
            </summary>
            <remarks>Override this method to change the root container to be used by the application.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.LoadModules">
            <summary>
            Loads the application modules into the root container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.ConfigureModules">
            <summary>
            Searches for specific module configuration and configures each module when that configuration is available.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.Start">
            <summary>
            Override this methos to add behavior to be executed once the application has started.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.WebClientApplication.BuildItemWithCurrentContext(System.Object)">
            <summary>
            Utility method to build up an object without adding it to the container.
            It uses the application's PageBuilder and the <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/> for the module handling the current request
            </summary>
            <param name="obj">The object to build.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.WebClientApplication.CurrentContext">
            <summary>
            Used for testability
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.WebClientApplication.ApplicationBuilder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> used by the application and its modules.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.WebClientApplication.PageBuilder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilder`1"/> used to build the requested pages.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.WebClientApplication.RootContainer">
            <summary>
            Gets and sets the root <see cref="T:Microsoft.Practices.CompositeWeb.CompositionContainer"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.HttpContext">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpContext"/> by wrapping the <see cref="T:System.Web.HttpContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.#ctor(System.Web.HttpContext)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpContext"/>.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.AddError(System.Exception)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.ClearError">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.GetSection(System.String)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.RewritePath(System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.RewritePath(System.String,System.String,System.String)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Context">
            <summary>
            Gets the wrapped <see cref="T:System.Web.HttpContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.AllErrors">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Application">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.ApplicationInstance">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Cache">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.CurrentHandler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Error">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Handler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.IsCustomErrorEnabled">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.IsDebuggingEnabled">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Items">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.PreviousHandler">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Profile">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Request">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Response">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Server">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Session">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.SkipAuthorization">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Timestamp">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.Trace">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpContext.User">
            <summary>
            See <see cref="T:System.Web.HttpContext"/> for a description.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IHttpServerUtility"/> interface by wrapping <see cref="T:System.Web.HttpServerUtility"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.#ctor(System.Web.HttpServerUtility)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/>.
            </summary>
            <param name="httpServerUtility">The <see cref="T:System.Web.HttpServerUtility"/> to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.ClearError">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.CreateObject(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.CreateObject(System.Type)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.CreateObjectFromClsid(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Execute(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Execute(System.String,System.Boolean)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.GetLastError">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.HtmlDecode(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.HtmlEncode(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.MapPath(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Transfer(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.Transfer(System.String,System.Boolean)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.UrlDecode(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.UrlEncode(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.UrlPathEncode(System.String)">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.MachineName">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility.ScriptTimeout">
            <summary>
            See <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpServerUtility"/> for a description.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.HttpSessionState">
            <summary>
            Implements the <see cref="T:System.Web.SessionState.IHttpSessionState"/> interface by wrapping <see cref="T:System.Web.SessionState.HttpSessionState"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.#ctor(System.Web.SessionState.HttpSessionState)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Web.HttpSessionState"/>.
            </summary>
            <param name="session">The <see cref="T:System.Web.SessionState.HttpSessionState"/> to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Abandon">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Add(System.String,System.Object)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Clear">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.GetEnumerator">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Remove(System.String)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.RemoveAll">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.RemoveAt(System.Int32)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Session">
            <summary>
            Gets the wrapped <see cref="T:System.Web.SessionState.HttpSessionState"/>.
            </summary>
            <exception cref="T:System.Exception">If not SessionState can be found for the current context.</exception>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.CodePage">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.CookieMode">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Count">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.IsCookieless">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.IsNewSession">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.IsReadOnly">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.IsSynchronized">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Keys">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.LCID">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Mode">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.SessionID">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.StaticObjects">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.SyncRoot">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Timeout">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Item(System.Int32)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.HttpSessionState.Item(System.String)">
            <summary>
            See <see cref="T:System.Web.SessionState.IHttpSessionState"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.StateValue`1">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.CompositeWeb.Interfaces.IStateValue"/> interface for a generic type.
            </summary>
            <typeparam name="T">The type of the value to manage.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.StateValue`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Web.StateValue`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.StateValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeWeb.Web.StateValue`1"/>.
            </summary>
            <param name="value">The initial value for the field.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.StateValue`1.SetDefault">
            <summary>
            Sets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.StateValue`1.Value">
            <summary>
            Gets or sets the actual value from or to the session state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.StateValue`1.SessionState">
            <summary>
            Gets or sets the session state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.StateValue`1.KeyName">
            <summary>
            Gets or sets the key of the value in the session state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeWeb.Web.StateValue`1.Microsoft#Practices#CompositeWeb#Interfaces#IStateValue#Value">
            <summary>
            Gets or sets the actual value from or to the session state.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.UI.MasterPage">
            <summary>
            Base class for master pages that support the CWAB
            dependency injection. Use of this class is optional,
            it saves you from having to call BuildItemWithCurrentContext
            yourself.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.UI.MasterPage.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.
             Calls WebClientApplication.BuildItemWithCurrentContext after the events are handled
             to fire the DI engine.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data. </param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.UI.Page">
            <summary>
            Base class for pages that use the CWAB dependency injection
            system. Use of this is optional, but saves you from having
            to call BuildItemWithCurrentContext yourself.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.UI.Page.OnPreInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Page.PreInit"></see> event at the beginning of page initialization.
             Calls WebClientApplication.BuildItemWithCurrentContext after the events are handled
             to fire the DI engine.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeWeb.Web.UI.UserControl">
            <summary>
            Base class for user controls that support CWAB dependency
            injection. Use of this class is optional, but if you use
            it then you don't need to call BuildItemWithCurrentContext
            manually.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeWeb.Web.UI.UserControl.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.
             Calls WebClientApplication.BuildItemWithCurrentContext after the events are handled
             to fire the DI engine.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data. </param>
        </member>
    </members>
</doc>
